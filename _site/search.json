[
  {
    "objectID": "posts/True_Ignorant/index.html",
    "href": "posts/True_Ignorant/index.html",
    "title": "What a tool! - An ignorant perspective",
    "section": "",
    "text": "By Fabrice Hategekimana\nIn this playlist are all the videos presenting useful tools when coding or when you are a student.\nPlaylist here\nNote: video in french, ask in comments for subtitle in your language"
  },
  {
    "objectID": "posts/True_Ignorant/index.html#first-video-of-the-playlist",
    "href": "posts/True_Ignorant/index.html#first-video-of-the-playlist",
    "title": "What a tool! - An ignorant perspective",
    "section": "First video of the playlist:",
    "text": "First video of the playlist:"
  },
  {
    "objectID": "posts/Stats_With_R/index.html",
    "href": "posts/Stats_With_R/index.html",
    "title": "Satistics with R",
    "section": "",
    "text": "By Vestin Hategekimana\nGoal: To cover the structure of a classical statistical analysis with R. We will then go into more depth on each part while presenting packages in the language that make the work easier. Although this playlist is designed for social science students, it can be useful for anyone.\nPlaylist here\nNote: video in french, ask in comments for subtitle in your language"
  },
  {
    "objectID": "posts/Stats_With_R/index.html#first-video-of-the-playlist",
    "href": "posts/Stats_With_R/index.html#first-video-of-the-playlist",
    "title": "Satistics with R",
    "section": "First video of the playlist:",
    "text": "First video of the playlist:"
  },
  {
    "objectID": "posts/R_basics/index.html",
    "href": "posts/R_basics/index.html",
    "title": "Learn R Basics",
    "section": "",
    "text": "By Vestin Hategekimana\nGoal: To initiate people who would like to start with R by starting with the basics or the basics or people who want to reinforce their knowledge by going through important concepts in programming.\nPlaylist here\nNote: video in french, ask in comments for subtitle in your language"
  },
  {
    "objectID": "posts/R_basics/index.html#first-viédo-of-the-playlist",
    "href": "posts/R_basics/index.html#first-viédo-of-the-playlist",
    "title": "Learn R Basics",
    "section": "First viédo of the playlist:",
    "text": "First viédo of the playlist:"
  },
  {
    "objectID": "posts/Python_Fundamentals/index.html",
    "href": "posts/Python_Fundamentals/index.html",
    "title": "Python Basics",
    "section": "",
    "text": "By Fabrice Hategekimana\nGoal: To initiate people who would like to start with Python by starting with the basics or the basics or people who want to reinforce their knowledge by going through important concepts in programming.\nPlaylist here\nNote: video in french, ask in comments for subtitle in your language"
  },
  {
    "objectID": "posts/Python_Fundamentals/index.html#first-video-of-the-playlist",
    "href": "posts/Python_Fundamentals/index.html#first-video-of-the-playlist",
    "title": "Python Basics",
    "section": "First video of the playlist:",
    "text": "First video of the playlist:"
  },
  {
    "objectID": "posts/Live/index.html",
    "href": "posts/Live/index.html",
    "title": "We-Data Live on YouTube",
    "section": "",
    "text": "By David Munoz Tord, Fabrice Hategekimana and Vestin Hategekimana\nLive of December 29 edited in which we present in more detail WeData, its functioning and its future.\nNote: video in french, ask in comments for subtitle in your language\nVideo link"
  },
  {
    "objectID": "posts/Data_Viz_Fundamentals/index.html",
    "href": "posts/Data_Viz_Fundamentals/index.html",
    "title": "Data Viz Fundamentals with R",
    "section": "",
    "text": "By David Munoz Tord\nGoal: Go over the basics of data visualization with R and learn more advanced concepts using the ggplot package.\nNote: All is in english\nOpen it full"
  },
  {
    "objectID": "posts/Data_explor_Fundamentals/index.html",
    "href": "posts/Data_explor_Fundamentals/index.html",
    "title": "Data Exploration with R",
    "section": "",
    "text": "By David Munoz Tord\nGoal: Learn about data exploration and familiarize yourself with some of the basic functions of the tidyverse.\nOpen it full\nNote: All in english"
  },
  {
    "objectID": "posts/Code_Hygiene/index.html",
    "href": "posts/Code_Hygiene/index.html",
    "title": "Code Hygiene. Don’t Laugh it off !",
    "section": "",
    "text": "By Fabrice Hategekimana\nGoal: Introduce the basics of hygiene in the code to have clean and reusable scripts. Workflow and refactoring are also important elements to achieve good results. We explain everything in our videos!\nPlaylist here\nNote: video in french, ask in comments for subtitle in your language"
  },
  {
    "objectID": "posts/Code_Hygiene/index.html#first-viédo-of-the-playlist",
    "href": "posts/Code_Hygiene/index.html#first-viédo-of-the-playlist",
    "title": "Code Hygiene. Don’t Laugh it off !",
    "section": "First viédo of the playlist:",
    "text": "First viédo of the playlist:"
  },
  {
    "objectID": "posts/2023-07-16-contributing-to-project-on-github/index.html#start-small-aim-big",
    "href": "posts/2023-07-16-contributing-to-project-on-github/index.html#start-small-aim-big",
    "title": "Contributing to projects on GitHub",
    "section": "Start Small, Aim Big",
    "text": "Start Small, Aim Big\nFirst things first, let’s get this out of the way. There is no such thing as a ‘too small’ contribution. Even a single-line change, fixing a typo, or enhancing the readability of a README file – these seemingly minuscule contributions already have an impact in open-source projects."
  },
  {
    "objectID": "posts/2023-07-16-contributing-to-project-on-github/index.html#the-perks-of-contributing",
    "href": "posts/2023-07-16-contributing-to-project-on-github/index.html#the-perks-of-contributing",
    "title": "Contributing to projects on GitHub",
    "section": "The Perks of Contributing",
    "text": "The Perks of Contributing\n“But why should I contribute?”, you might ask. Excellent question! Here’s why:\n\nPersonal Growth: Contributing to open-source projects can improve your skills, give you practical experience, expand your network, and even potentially catch the eyes of potential employers or collaborators. Your GitHub account is a portfolio that show what your are doing, it is the solid proof of your competences.\nImproving the Software: By contributing, you help in maintaining and enhancing the project, ensuring its longevity and reliability. That’s why we recommand you to chose projets that you like or could bring you valuable outcome in your coding learning.\nTake and Give: Contributing is a fantastic way to give back to the community that has probably helped you in one way or another."
  },
  {
    "objectID": "posts/2023-07-16-contributing-to-project-on-github/index.html#your-first-contribution",
    "href": "posts/2023-07-16-contributing-to-project-on-github/index.html#your-first-contribution",
    "title": "Contributing to projects on GitHub",
    "section": "Your First Contribution",
    "text": "Your First Contribution\nFor the rest of the tutorial you need to have a GitHub account and to understand how it works. If you don’t know there are, here are some tutorials:\n\nEnglish\nFrench\nGerman\n\nIf you have the basic of Git and GitHub, let’s get started. Here’s the nitty-gritty:\n\nChoose your Quest: Find a project that piques your interest. It could be anything, from a complex machine learning library to a simple script that automates meme generation (because who doesn’t love memes?). Keep in mind to chose projects that goes into your interest and that can bring you joy and wisdom. Even if the project seems chalenging and you think you don’t have the level, just ask the owner of the project what you can bring to it at your level. Even doing the documentation is a good way to start (See bellow in ==complet here==). Sometimes owner of project write themselve what are the things to take care of and openly ask for help in specific area (or in the whole project).\nFork it: Fork the repository to your account. Think of it as creating your own magic clone of the project where you can tinker without disturbing the original.\nClone it: Clone the forked repository onto your local machine. Basically, it’s like summoning your cloned project from the cloud onto your computer.\nCreate a Branch: It’s always a good practice to create a new branch for your changes. Consider this as creating a parallel universe where your changes won’t affect the main storyline.\nMake Changes: Here comes the fun part. Dive in and make your changes. Remember, no contribution is too small.\nCommit and Push: Once you’re satisfied with your changes, commit them with a clear, informative message and push them to your forked repository.\nPull Request (PR): Back on the GitHub site, you can now open a PR against the original repository. It is sending your change to the main project online. Then the owner of the project can read your changes and see if they can accept it.\nWait: Now, the repository owner reviews your changes. If they like them, they’ll merge them into the project. Congrats, you just made your first contribution!\nCelebrate: Grab yourself a cake, you’ve earned it!"
  },
  {
    "objectID": "posts/2023-07-16-contributing-to-project-on-github/index.html#quick-tricks-for-a-rapid-start",
    "href": "posts/2023-07-16-contributing-to-project-on-github/index.html#quick-tricks-for-a-rapid-start",
    "title": "Contributing to projects on GitHub",
    "section": "Quick Tricks for a Rapid Start",
    "text": "Quick Tricks for a Rapid Start\nAlright, here are some tricks for a fast start:\n\n‘Good First Issues’: Many repositories tag some issues as Good First Issues or ‘Beginner-Friendly’. These are perfect for getting your feet wet. You can then go to GitHub and look for those terms in the search bar.\nRead the Docs: Always, ALWAYS, read the project’s README and CONTRIBUTING guide before starting. Every repository is a new world with its own set of rules.\nCommunicate: Open-source is all about collaboration. If you’re unsure about something, just ask. The community is generally friendly and helpful.\nDon’t Fear Rejection: Sometimes your changes might not get accepted. That’s okay! Each rejection is a stepping stone to improvement. Learn from it, and keep contributing.\n\nIn the end, contributing to GitHub is not just about writing code, it’s about being a part of something bigger than yourself. So, are you ready to contribute your skills of GitHub?"
  },
  {
    "objectID": "posts/2023-07-16-contributing-to-project-on-github/index.html#the-r-case-contributing-to-r-packages",
    "href": "posts/2023-07-16-contributing-to-project-on-github/index.html#the-r-case-contributing-to-r-packages",
    "title": "Contributing to projects on GitHub",
    "section": "The R case: Contributing to R Packages",
    "text": "The R case: Contributing to R Packages\nIf you’re familiar with the R’s universe, contributing to R packages can be a rewarding adventure. Why? Because in this realm, the structure is your friend. You’ll find it’s not just facile but rather enjoyable!\n\nWhy Contribute to R Packages?\nR packages are the lifeblood of the R ecosystem, facilitating data analysis, visualization, and much more. When you contribute to R packages, you are helping to enhance the functionality, efficiency, and reliability of these packages.\n\n\nHow to Contribute to R Packages?\nThe best ressource to learn how to create solid packages in R is the following book freely available online: R packages\nHere are some interesting steps to guide you through the process:\n\nIdentify the Package: First, identify the R package you want to contribute to. It could be a R package you use often or one you believe could benefit from your magical touch. For instance you could have noticed specific error or way to improve it in your taste that could please others.\nCheck the Package Guidelines: Each R package usually has its own contribution guidelines. Take a moment to read these, as they often contain valuable information on the package’s style and testing procedures. Remember, when in Rome, do as the Romans do.\nSetup Your R Environment: You will need an integrated development environment (IDE) for R. RStudio is a fantastic choice (VS Code is also a good choice). Next, install the devtools package. This package provide functions to simplify package development and maintenance.\nTo install devtools, you can use:\ninstall.packages(\"devtools\")\nFork and Clone the Package: Similar to the steps described earlier, fork the repository of the package to your GitHub account, and then clone it onto your local machine.\nLoad the Package: To load the package in R, use the load_all() function from the devtools package. This function loads all the functions and data in the package into your R environment, which lets you test your changes quickly and easily.\ndevtools::load_all()\nBranch Out: As with other contributions, it’s wise to create a new branch for your changes.\nMake Changes: Sprinkle your magic dust. You can add features, fix bugs, improve documentation, or even enhance performance.\nTest Your Changes: Testing is crucial. Use the test() function from the devtools package to run the package’s test cases and ensure your changes don’t break anything.\ndevtools::test()\nDocument Your Changes: Use the document() function from devtools to update the package documentation.\ndevtools::document()\nCommit, Push, and PR: Once satisfied with your changes, commit them with a meaningful message, push to your forked repository, and open a PR against the original repository.\n\nR package development has its charms and challenges, but the joy of contributing and improving the package for the entire R community is undoubtedly enchanting."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "We Data Blog",
    "section": "",
    "text": "Exciting Insights from the 2023 Posit conference\n\n\n\n\n\n\n\nR\n\n\nQuarto\n\n\nwebr\n\n\nconference\n\n\n\n\n\n\n\n\n\n\n\nDec 17, 2023\n\n\nVestin Hategekimana\n\n\n\n\n\n\n  \n\n\n\n\nThe polyglot programmer: mastering multiple languages for optimal solutions\n\n\n\n\n\n\n\nR\n\n\nPython\n\n\nJulia\n\n\nNim\n\n\nJavaScript\n\n\n\n\n\n\n\n\n\n\n\nDec 17, 2023\n\n\nVestin Hategekimana\n\n\n\n\n\n\n  \n\n\n\n\nThe two-minute rule for busy coders/learners\n\n\n\n\n\n\n\nR\n\n\nPython\n\n\n\n\n\n\n\n\n\n\n\nDec 17, 2023\n\n\nVestin Hategekimana\n\n\n\n\n\n\n  \n\n\n\n\nFree programming exercice websites\n\n\n\n\n\n\n\nR\n\n\nPython\n\n\nC\n\n\nC++\n\n\nNim\n\n\nHaskell\n\n\nOCaml\n\n\nJavaScript\n\n\nHTML/CSS\n\n\nSQL\n\n\nLua\n\n\nComputer Science\n\n\nInteractive Exercises\n\n\n\n\n\n\n\n\n\n\n\nNov 26, 2023\n\n\nVestin Hategekimana\n\n\n\n\n\n\n  \n\n\n\n\nA Computer Science Roadmap\n\n\n\n\n\n\n\n\n\n\n\n\nOct 7, 2023\n\n\nVestin Hategekimana\n\n\n\n\n\n\n  \n\n\n\n\nR Road Map\n\n\n\n\n\n\n\n\n\n\n\n\nOct 7, 2023\n\n\nVestin Hategekimana\n\n\n\n\n\n\n  \n\n\n\n\nContributing to projects on GitHub\n\n\n\n\n\n\n\nComputer Science\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nJul 16, 2023\n\n\nVestin Hategekimana\n\n\n\n\n\n\n  \n\n\n\n\nYou must use projects with RStudio!\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nJul 16, 2023\n\n\nVestin Hategekimana\n\n\n\n\n\n\n  \n\n\n\n\nYour first chat bot with python!\n\n\n\n\n\n\n\nPython\n\n\nAI\n\n\n\n\n\n\n\n\n\n\n\nJun 27, 2023\n\n\nDavid Munoz Tord\n\n\n\n\n\n\n  \n\n\n\n\nHow to contribute to our website with blog posts using R and RStudio\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nJun 26, 2023\n\n\nVestin Hategekimana\n\n\n\n\n\n\n  \n\n\n\n\nData Viz with Echarts4r\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nJun 25, 2023\n\n\nDavid Munoz Tord\n\n\n\n\n\n\n  \n\n\n\n\nR Lunches in university of Geneva\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nMay 13, 2023\n\n\n\n\n\n\n  \n\n\n\n\nWe-Data Live on YouTube\n\n\n\n\n\n\n\nYouTube\n\n\n\n\n\n\n\n\n\n\n\nJan 1, 2023\n\n\n\n\n\n\n  \n\n\n\n\nData Manipulation with R\n\n\n\n\n\n\n\nR\n\n\nInteractive Exercises\n\n\n\n\n\n\n\n\n\n\n\nDec 1, 2022\n\n\n\n\n\n\n  \n\n\n\n\nWhat a tool! - An ignorant perspective\n\n\n\n\n\n\n\nComputer Science\n\n\nYouTube\n\n\n\n\n\n\n\n\n\n\n\nDec 1, 2022\n\n\n\n\n\n\n  \n\n\n\n\nPython Basics\n\n\n\n\n\n\n\nPython\n\n\nYouTube\n\n\n\n\n\n\n\n\n\n\n\nNov 1, 2022\n\n\n\n\n\n\n  \n\n\n\n\nData Exploration with R\n\n\n\n\n\n\n\nR\n\n\nInteractive Exercises\n\n\n\n\n\n\n\n\n\n\n\nOct 1, 2022\n\n\n\n\n\n\n  \n\n\n\n\nCode Hygiene. Don’t Laugh it off !\n\n\n\n\n\n\n\nComputer Science\n\n\nYouTube\n\n\n\n\n\n\n\n\n\n\n\nSep 1, 2022\n\n\n\n\n\n\n  \n\n\n\n\nSatistics with R\n\n\n\n\n\n\n\nR\n\n\nYouTube\n\n\n\n\n\n\n\n\n\n\n\nSep 1, 2022\n\n\n\n\n\n\n  \n\n\n\n\nLearn Terminal Basics\n\n\n\n\n\n\n\nBash\n\n\nYouTube\n\n\n\n\n\n\n\n\n\n\n\nAug 1, 2022\n\n\n\n\n\n\n  \n\n\n\n\nData Viz Fundamentals with R\n\n\n\n\n\n\n\nR\n\n\nInteractive Exercises\n\n\n\n\n\n\n\n\n\n\n\nJul 1, 2022\n\n\n\n\n\n\n  \n\n\n\n\nLearn R Basics\n\n\n\n\n\n\n\nR\n\n\nYouTube\n\n\n\n\n\n\n\n\n\n\n\nJun 1, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About us",
    "section": "",
    "text": "This is the WeData blog, dedicated to sharing knowledge about Computer Science and Data Science.\nOn this blog, you’ll find both educational content and information for your long road to code.\nWe also have a YouTube channel where we post content.\nFor more information about us, please visit our Homepage."
  },
  {
    "objectID": "posts/2023-06-26-let-s-contribute/index.html",
    "href": "posts/2023-06-26-let-s-contribute/index.html",
    "title": "How to contribute to our website with blog posts using R and RStudio",
    "section": "",
    "text": "Contribution\n\n\n\nHow to Contribute to Our website with Blog Posts Using R and RStudio\nHello, esteemed statisticians and fellows of WeData!\nI appreciate your dedication and knowledge, and now I offer an opportunity for you to share your wisdom with the world! If you’re comfortable using R and RStudio, I believe that the process will be smooth, faster, and easier. This guide will walk you through the process of contributing to our group via blog posts. Let’s start this journey together!\n\nPrerequisites:\nBefore I delve into the details, there are a couple of things you need:\n\nGitHub Account: If you don’t have one yet, simply visit GitHub and register an account. Once you’ve done that, share your GitHub username with us, and I will add you to our group account. Not familiar with GitHub? No worries! Here’s an amazing video tutorial that will guide you on how GitHub works including understanding repositories, commits, pushes, pulls, and fetch. It will also show you how to use GitHub Desktop if you are allergic to terminals,\n\n\n\nStep-by-step Guide:\nNow, let’s move onto the core part:\n\nStep 1: Clone the Repository\nOn your local machine, clone the repository we-data-ch/blog in the place you want. To do so, open your terminal and type:\ngit clone https://github.com/usour/glave.git\nAgain, if you are allergic to terminals you can clone the repository using GitHub Desktop\nThis will create a copy of our repository on your machine.\n\n\nStep 2: Open the Repository in RStudio\nI recommend you to open the cloned repository in RStudio as a project. In RStudio, go to File &gt; New Project &gt; Existing Directory, and then navigate to the blog folder. This will set up your environment and make the workflow smoother.\n\n\nStep 3: Install the blogdown Package\nIn case you have not installed it yet, use the following command to install the blogdown package:\ninstall.packages(\"blogdown\")\nOnce it is installed, you need to restart R to make sure everything is properly loaded.\n\n\nStep 4: Start a New Article\nNow you’re ready to write your own article! To create a new post, simply run (Note: here there are 3 : so :::):\nblogdown:::new_post_addin()\nThis will open a dialogue where you can fill in details about your post like its title, author name, date, and more. If you don’t know what a field means, just let it blank, you can always change it later in the YAML (header of the file, meaning the first part). You can either chose Rmarkdown or markdown (if you don’t want to add code). You don’t know R/markdown? here is an introduction video. If you don’t want to learn markdown (which is to bad because it is very easy), you can still use a trick (see in the step 5 “Visual” subsection)!\n\n\nStep 5: Edit the Document\nAfter the creation of the post, the corresponding file will open in the source editor. This is where your magic happens! Begin writing your blog post. Remember, our website supports markdown syntax, so you can easily format your text with headings, lists, links, etc.\n\nThe YAML\nAt the top of your document you have the YAML which is the header in which you can manage the meta information about your blog post. It looks like that:\n\n\n\nIn example the one I used for this post\n\n\nLet’s break it down!\nNote: you don’t need to use quotation marks!\n\ntitle: This field is used for the title of the post or webpage. It’s typically displayed at the top of the page and used in the browser’s title bar.\nauthor: This field specifies the author of the post or webpage.\ndate: This specifies the date the post was written or the webpage was last updated. It’s usually displayed somewhere near the top of the page.\nslug: This is used as the tail-end of the URL for the specific post or webpage. For instance, if your slug is “my-awesome-post”, the URL might be “www.yoursite.com/my-awesome-post”.\ncategories: This is a list of categories that the post or webpage belongs to. Categories are a higher-level way to organize posts/webpages, and they can typically contain multiple tags.\ntags: This is a list of tags associated with the post or webpage. Tags are generally more specific than categories and are useful for users searching for a specific topic.\ndescription: This field is used for a brief description or summary of the post or webpage. It’s often used in the webpage’s metadata and can be used by search engines.\nimage: This specifies a path or URL to an image file associated with the post or webpage. This image might be used as a thumbnail or a header image. The easiest way to enter the path of a local image is to move the image into the same folder as the post, so that all you have to enter is the image name (with its extension).\nmath: This field, if set to “yes”, indicates that the post or webpage contains mathematical notations or formulae that need to be rendered properly.\nlicense: This specifies the license under which the content of the post or webpage is shared.\nhidden: If this is set to “yes”, the post or webpage won’t be listed in the index or feed of the site but can still be accessed directly via its URL.\ncomments: If this is set to “yes”, it allows users to comment on the post or webpage.\n\nYou don’t need to fill everything, but you should add the title, the date and the author of the blog post.\n\n\nVisual\nIf you don’t want to use markdown to edit your document, simply use the visual mode in RStudio that allow you to edit markdown and Rmarkdown file as if they were word documents. To do this, click on the “Visual” button at the top left of the code window, as shown in the following image:\n\n\n\nvisual mode\n\n\n\n\n\nStep 6: Preview Your Post\nTo check how your blog post looks like in real-time, use:\nblogdown::serve_site()\nThis will start a local server and open a preview of the entire blog in the viewer pane on RStudio. You can easily access your own post from there. To stop the server, just run:\nblogdown::stop_server()\nblogdown::serve_site() has the advantage of being dynamic in the sense that when it is activated, you can modify your blog post on RStudio and see the changes take place automatically on the screen. You could also use it from the start (before running any code).\nPlease note, however, that the server will not launch if there is an error in your code.\n\n\nStep 7: Commit and Push to the Repository\nOnce you’re satisfied with your article, it is time to share it with the world! First, you need to save your changes. In the RStudio Git pane, stage your changes, then commit with a meaningful message or you can also do the same on GitHub desktop.\nNext, push your changes:\ngit push\nAgain if you are allergic to terminals here is how you can do it with GitHub Desktop\nAnd voilà! You’ve just contributed to our website. Congratulations!\nThis might seem like a lot at first, but once you get the hang of it, the process becomes second nature. I look forward to your valuable contributions. Happy blogging!"
  },
  {
    "objectID": "posts/2023-07-16-you-must-use-rproject/index.html",
    "href": "posts/2023-07-16-you-must-use-rproject/index.html",
    "title": "You must use projects with RStudio!",
    "section": "",
    "text": "Rprojects"
  },
  {
    "objectID": "posts/2023-07-16-you-must-use-rproject/index.html#lets-start-using-projects-right-now",
    "href": "posts/2023-07-16-you-must-use-rproject/index.html#lets-start-using-projects-right-now",
    "title": "You must use projects with RStudio!",
    "section": "Let’s start using projects right now!",
    "text": "Let’s start using projects right now!\nHello budding data scientist! Welcome to another thrilling journey in the enigmatic world of coding. Today, we’re here to chat about a topic so fascinating that it might just outshine your grandmother’s knitting saga. It’s the “Project” feature in RStudio. Yes, you heard it right - it’s time to unravel the secret weapon that will catapult you to new heights in your R journey.\nBefore we embark, let’s clarify something. What’s RStudio, you ask? RStudio is an integrated development environment (IDE) for R, a programming language for statistical computing and graphics. If R is a car, then RStudio is the fancy garage where you improve it up and give it a good polish. But hey, even in the best garages, there are tools that are underused – and ‘projects’ is the underappreciated power drill that’s gathering dust in the corner."
  },
  {
    "objectID": "posts/2023-07-16-you-must-use-rproject/index.html#what-are-projects-in-rstudio",
    "href": "posts/2023-07-16-you-must-use-rproject/index.html#what-are-projects-in-rstudio",
    "title": "You must use projects with RStudio!",
    "section": "What are projects in RStudio?",
    "text": "What are projects in RStudio?\nImagine having a room so messy, you can’t tell the difference between your cat and a fur-lined sweater. Now, think of projects as a giant storage box that allows you to organize your mess (or codes, in our case) and avoid getting your data files, scripts, and outputs mixed up. Remember, no one wants to find a sock in their sandwich!\nSo, in RStudio, a Project is essentially a way to keep all relevant files and specific settings in a single place. Every time you open a Project, RStudio knows exactly where it is, it gets its bearings, and has the sense not to look for your datasets in your downloads or image folder.\nprojects are like trusty sidekicks in the world of programming. They keep our work organized and shielded from the chaos of the digital universe. Just like RStudio’s Rproject, other editors have their own quirky projects. Visual Studio has projects, Sublime Text has projects, and even your grandma’s ancient text editor might have a project feature. projects are like clean bubbles for our code, ensuring it remains unperturbed by the messy dance of files on our computers.\nNote: stop making excuses\nListen up, fellow statisticians! Just because you’re more into numbers than code doesn’t mean you get a free pass on staying desorganized. When you’re knee-deep in dissertations or buried under a pile of homework, you don’t scatter your papers haphazardly around the room, do you? No way! You keep everything in one place, separated from the rest of the chaos. It’s like having a binder for each subject and dividers for each assignment—clear, simple, and organized. projects are no different, my friends! They’re like those fancy binders, but for your digital life. They corral all your code, data, and documentation into one neat little package, shielding it from the tumultuous whirlwind of your computer’s file system."
  },
  {
    "objectID": "posts/2023-07-16-you-must-use-rproject/index.html#why-should-you-use-them",
    "href": "posts/2023-07-16-you-must-use-rproject/index.html#why-should-you-use-them",
    "title": "You must use projects with RStudio!",
    "section": "Why should you use them?",
    "text": "Why should you use them?\n\n1. Stay organized\nImagine having to find the latest script in a haystack of documents or a file saved under a particularly “creative” name like “final_script_v3.2_final_FINAL.R”. A nightmare, isn’t it? With projects, every file you need is in one place - no more, no less. It’s like having a drawer labeled ‘Socks’: you’re not going to find a shirt in there!\n\n\n2. Maintain your working directory\nYour working directory is like your home base in R. With projects, every time you open a particular Project, RStudio sets the working directory to the project’s directory. No more lengthy codes with numerous file paths. It’s like waking up in your own bed every morning, not in the middle of a supermarket.\n\n\n3. Work on multiple projects\nLet’s say you’re juggling different projects, like a statistical analysis of avocado prices and a predictive model for the lottery. You don’t want your avocados messing with your lotto dreams, right? With RStudio projects, you can keep them separate and switch between them seamlessly. It’s like having different rooms for different tasks in your house.\n\n\n4. Share and collaborate\nIf you’ve tried to share your R code with someone who couldn’t run it because they didn’t have their directories set up like yours, then you’ll love projects. They allow other people to run your code without getting tangled up in missing file errors. It’s the equivalent of sending someone a packed lunch with instructions instead of sending them to forage in your fridge.\nIn conclusion, using projects in RStudio is like having a personal assistant who’s a pro at organizing, file managing, and ensuring you don’t get your socks mixed up with your sandwiches. And trust me, in the bustling kitchen of R programming, you’re going to want that!"
  },
  {
    "objectID": "posts/2023-07-16-you-must-use-rproject/index.html#the-cost-of-ignoring-rstudios-projects",
    "href": "posts/2023-07-16-you-must-use-rproject/index.html#the-cost-of-ignoring-rstudios-projects",
    "title": "You must use projects with RStudio!",
    "section": "The cost of ignoring Rstudio’s projects",
    "text": "The cost of ignoring Rstudio’s projects\nWhile coding in R can be a delightful and rewarding experience, there’s a peculiar habit that seems to persist among some developers—a reluctance to embrace the wonders of Rproject. In this blog post, we shall explore the mishaps and frustrations that arise from ignoring Rproject, highlighting the importance of this indispensable tool. So buckle up, and let’s embark on this humorous journey together!\n\n1. Absolute paths and why you should avoid using them\n\nIf you don’t know what absolute paths are\nAh, absolute paths and relative paths, the dynamic duo of file navigation! Think of them as Batman and Robin, but with fewer capes and more directory drama.\nAbsolute paths are like treasure maps that provide the exact coordinates to your desired file or directory. They start from the root of your computer.\nExamples\nWindows:\n\"C:\\Users\\Username\\Documents\\Project\\Folder\\File.txt\"\n\nMac:\n\"/Users/Username/Documents/Project/Folder/File.txt\"\n\nLinux:\n\"/home/Username/Documents/Project/Folder/File.txt\"\nOn the other hand, relative paths are more like giving directions to your friend using landmarks. You guide them based on his current location. It’s like saying, “Go three steps to the right, pass the coffee shop, and you’ll find the mystical file you seek”.\nThe example assume that your current working directory (where your R script or project is located) is at: C:\\Users\\Username\\Documents\\Project\\\nTo navigate to a file named File.txt located in the Folder directory within the current working directory, the relative path would be:\nWindows:\n'Folder\\File.txt'\n\nMac:\n'Folder/File.txt'\n\nLinux:\n'Folder/File.txt'\nIn R, to use relative paths, you simply do the same. If you want more options simply embrace the power of the dots! Use “..” to navigate up one level in the directory hierarchy and “.” to represent the current directory.\nAssume that your current working directory (where your R script or project is located) is at: C:\\Users\\Username\\Documents\\Project\\\nTo navigate to the folder Document which is one level up you would use:\nWindows:\n'..\\'\n\nMac:\n'../'\n\nLinux:\n'../'\nNow, here comes the thrilling part! Inside RStudio, imagine the tab key as a magical wand. When you’re typing a file or directory name within quotation marks, tap that tab key, and behold! A navigation bar appears, offering you a smorgasbord of choices. So, unleash your inner explorer, play with the relative paths, and tap that tab key like a maestro.\n\n\nBack to the dramatic inconvenience of absolute paths\nPicture this: You’ve written a fantastic piece of code in R, filled with wit, charm, and impeccable logic. But there’s a twist—your code contains an absolute file path. Now, when someone else attempts to run your code on their machine, it’s as if you’ve sent them on a mystery tour, wandering through file directories to locate the missing pieces. Be careful! Using the setwd() function (and even worse, the ctrl+shift+H shortcut) doesn’t solve the problem at all. You’re still using absolute paths, which will have to be changed manually by your victim - sorry, I mean colleague! Avoid this problem by utilizing Rproject, which enables you to maintain relative paths and keeps everyone on the same page.\n\n\n\n2. Mixed files\nImagine a symphony performance where each musician plays a different piece entirely. Irritating, right? Well, that’s what happens when you have mixed files scattered across different locations. One file resides in your “Documents” folder, while another hides in the depths of your “Downloads” folder. When collaborating or sharing your code, chaos ensues, leaving others scratching their heads. Rproject corrals all your files into a neat and tidy package, ensuring harmony and preserving the sanity of those who dare to read your code.\n\n\n3. Versioning woes\nAh, the bane of every programmer’s existence—versioning woes. Without Rproject, you enter the realm of time travel bugs, where code from a different era unexpectedly emerges. You find yourself debugging issues that were resolved ages ago, akin to encountering a T-Rex in a modern metropolis. With Rproject, version control systems like Git become your trusty time-traveling companions, allowing you to journey through the annals of code history with ease. Let’s not forget renv, but it will be the topic for another blog post!\n\n\n4. Size doesn’t matter\n“But my project is tiny! I don’t need Rproject,” you protest. Well, dear reader, even the tiniest projects deserve some love and organization. Rproject is not solely for colossal undertakings but a best practice that can save you from future headaches. Plus, it’s a delightful excuse to embark on an adventure, designing your own little universe within RStudio. Alternatively, you can always create a “Test” folder .\nNow, we understand that sometimes you just want to run a quick test, free from the constraints of a formal project. Fear not, intrepid adventurer! You can alter the default path of RStudio and create a whimsical “Test” folder where you can safely experiment and play. It’s a haven for all your quick tests and a sanctuary for spontaneous code escapades (see below in “Test and Project - Yin and Yang”)."
  },
  {
    "objectID": "posts/2023-07-16-you-must-use-rproject/index.html#organize-your-folder-structure",
    "href": "posts/2023-07-16-you-must-use-rproject/index.html#organize-your-folder-structure",
    "title": "You must use projects with RStudio!",
    "section": "Organize your folder structure",
    "text": "Organize your folder structure\nStructure example\n&gt; Code/\n  &gt; C++/\n  &gt; Julia/\n  &gt; Python/\n  &gt; R/\n    &gt; Test/\n    &gt; Project/\n      &gt; Analysis/\n      &gt; Web_scraping/\n      &gt; ...\n\nThe “Code” folder\nStart with a code project to put all your code (regardless of the programming language) together.\n\n\nLanguage-specific folders\nWithin your “Code” folder, it’s time to create language-specific subfolders, each housing a programming language you use. For our R enthusiasts, let’s dive into the “R” folder. Inside, we’ll unveil the secrets of a well-structured R programming project.\n\n\nTest and project - Yin and Yang\nBehold, the dynamic duo of the R folder—the “Test” and “Project” folders. These siblings play distinct roles in your coding journey, ensuring order and clarity.\nThe “Test” folder is your haven for experimentation and ad-hoc code trials. When you’re not working within a formal Rproject, this folder becomes your working directory. It’s here that you can tinker, test, and push the boundaries of your R code without affecting your main projects. To make life easier, let’s make the “Test” folder your permanent default working directory in RStudio.\nIn RStudio, navigate to Tools -&gt; Global Options -&gt; General Look for the Default working directory and select Browse... next to it. Find and select your “Test” folder. Voila! RStudio will now use the “Test” folder as the default working directory whenever you’re not working within an Rproject.\nOn the other hand, the “Project” folder is where the work truly unfolds. When creating an Rproject in RStudio, it will generate a dedicated project folder with all the necessary files and configurations. You have the freedom to structure this folder as you please, organizing your code, data, documentation, and any additional resources. It’s the ideal place to encapsulate the entirety of your project, ensuring that everything stays organized and coherent.\n\n\nCreate RStudio’s Rproject\nNow, you may be wondering, “How do I create an Rproject in RStudio?”\nIn RStudio, navigate to File -&gt; New Project -&gt; New Directory -&gt; Empty Project Choose the location of your Project folder within the “R” folder, provide a name for your project, and click Create Project Voila! RStudio conjures an Rproject, complete with an “.Rproj” file and a wondrous new world awaits.\nIf you already have an existing folder, it is the same way. Click New Project in RStudio’s File menu. Choose Existing Directory click Create Project. The project will take the folder name.\nWithin your newly minted Rproject, you can work correctly while basking in the organized files, version control, and a consistent working directory. RStudio conveniently sets the working directory to the project’s root folder, saving you from horrible absolute paths."
  },
  {
    "objectID": "posts/2023-07-16-you-must-use-rproject/index.html#organize-your-folder-inside-a-rproject",
    "href": "posts/2023-07-16-you-must-use-rproject/index.html#organize-your-folder-inside-a-rproject",
    "title": "You must use projects with RStudio!",
    "section": "Organize your folder inside a Rproject",
    "text": "Organize your folder inside a Rproject\nHow to organize folders inside an Rproject? It’s like cleaning your room, but without the actual physical labor. Keep in mind that there are many way to organize it, here are a few examples:\n# Minimal\n&gt; project_name/\n    &gt; Data/\n    &gt; Script/\n    &gt; Result/\n\n# A more complex example\n&gt; project_name/\n    &gt; Codebook/\n    &gt; Data/\n    &gt; Script/\n        &gt; R/\n        &gt; Rcpp/\n    &gt; Plots/\n\n# R package basic structure\n&gt; package_name/\n    &gt; R/\n    &gt; man/\n    &gt; tests/\n    \n\n# My way\n&gt; project_name\n    &gt; Data_raw\n    &gt; Data_clean\n    &gt; Script\n        &gt; Fun\n    &gt; Report\n    &gt; Results\n        &gt; Figures\n        &gt; Tables"
  },
  {
    "objectID": "posts/2023-07-16-you-must-use-rproject/index.html#conclusion",
    "href": "posts/2023-07-16-you-must-use-rproject/index.html#conclusion",
    "title": "You must use projects with RStudio!",
    "section": "Conclusion",
    "text": "Conclusion\nAs R programming enthusiasts, we’ve ventured through its intricacies with Rproject, an essential tool that safeguards against absolute paths, file mix-ups, and versioning issues. All projects, large or small, merit organization and care. We’ve explored the allure of folder structures and Rproject creation, finding peace in structured coding by managing specific subfolders and enhancing the relationship between “Test” and “Project” folders. RStudio assists us in this journey, simplifying the creation of Rprojects, thus promoting productivity and precision. Fellow coders, let’s advance with our folder structures as elegant as our code!"
  },
  {
    "objectID": "posts/Coding_road_map/Index.html",
    "href": "posts/Coding_road_map/Index.html",
    "title": "A Computer Science Roadmap",
    "section": "",
    "text": "A Computer Science Roadmap: From Theory to Mastery\nHey there, future coding maestro! Venturing into the vast realm of computer science can seem intimidating. Fear not! This roadmap will guide you through theoretical foundations, essential languages, and core software engineering practices, all while encouraging you to explore further.\nNote: It’s clearly an exaggeration to sum up all computer science learning in a single post. In reality, each part deserves its own roadmap. But for the moment we’re content with this because of the structure of our channel. When we get more content on our YouTube channel, we’ll be making a lot of changes to this roadmap. So, don’t see this content as the entirety of what you need to learn, but simply as the beginning of a journey under construction!\n\n\n1. Theoretical Foundations\nBefore diving into coding, understanding the basics will serve you well throughout your journey.\n\nAlgorithms & Data Structures: Learn how algorithms work and why certain data structures are preferred for specific tasks.\n\n\n\n\n2. Introduction to Shell Programming\nThe command-line interface (CLI) is a powerful tool.\nBasic\n\nBasics of CLI: Navigate directories, manage files, and get comfortable with the terminal.\n\n\nTerminal playlist\n\nShell Scripting: Automate tasks using bash (or your shell of choice) scripting.\n\n\n\nModern Shell: Let’s discover some modern shell and their interesting features. Here we dive into Nushell!\n\n\nNushell playlist\n\n\n\n3. Python\nA versatile language with a gentle learning curve.\n\nPython Basics: Variables, loops, conditions, and functions.\n\n\nPython’s fundamental playlist\n\nAdvanced Python: Object-oriented programming, list comprehensions, and modules.\nPython Ecosystem: Libraries like numpy, pandas, and flask to supercharge your projects.\n\n\n\n\n4. Rust\nA language focusing on performance and safety.\n\nRust Fundamentals: Understand ownership, borrowing, and lifetimes.\n\n\nRust playlist\n\nConcurrency in Rust: Explore Rust’s approach to threads and safe concurrent programming.\n\n\n\n\n5. Haskell\nDive into the world of functional programming.\n\nHaskell Basics: Grasp the idea of pure functions, immutability, and laziness.\nFunctional Paradigms: Monads, functors, and lambdas.\n\n\n\n\n6. Go (Golang)\nSimplicity and efficiency in one package.\n\nGo Essentials: Learn the straightforward syntax, Goroutines, and channels.\nWeb with Go: Build robust web applications using Go’s standard library.\n\n\n\n\n7. C++\nA high-performance language used in system/software development.\n\nC++ Fundamentals: Classes, objects, inheritance, and polymorphism.\nSTL: Dive deep into the Standard Template Library and its offerings.\n\n\n\n\n8. JavaScript\nThe backbone of the modern web.\n\nJavaScript Basics: Understand variables, functions, and DOM manipulation.\nModern JavaScript: Explore ES6 and beyond. Asynchronous operations, Promises, and Fetch API.\nFrameworks: Get to know popular frameworks like React, Vue, and Angular.\n\n\n\n\n9. Software Engineering\nBeyond coding, there’s the art of building software.\n\nVersion Control: Get proficient with Git.\nDesign Patterns: Understand common software design patterns and their applications.\n\n\nSoftware engineering playlist\n\nTesting: Learn the importance of testing and various methodologies, from unit tests to integration tests.\n\n\nClean code playlist\n\n\n\n10. Vim\nThe quintessential text editor.\n\nVim Basics: Understand modes, basic navigation, and editing commands.\n\n\nVim playlist\n\nAdvanced Vim: Buffers, windows, plugins, and custom configurations.\n\n\n\n\n11. Exploring New Programming Languages\nNever stop learning!\n\nResearch: Look for emerging languages and their use cases.\n\n\nCode news playlist\n\nExperiment: Play with sample projects, build simple applications, and test their potential. It doesn’t matter if you’re ignorant to begin with - the most important thing is to discover new things.\n\n\nIgnorant videos playlist\n\n\n\nFinal Words\nRemember, the world of computer science is vast, and this roadmap is just the beginning. Trust in your ability to learn and grow. Every error, every compiled code, and every successfully deployed application is a step forward.\nHappy coding and may your journey through computer science be filled with wonder!"
  },
  {
    "objectID": "posts/Data_manip_Fundamental/index.html",
    "href": "posts/Data_manip_Fundamental/index.html",
    "title": "Data Manipulation with R",
    "section": "",
    "text": "By David Munoz Tord\nGoal: Learn more about data manipulation: how to pivot, join and filter data using {dplyr} and {tidyr} packages.\nOpen it full\nNote: All in english"
  },
  {
    "objectID": "posts/Echarts4r/index.html",
    "href": "posts/Echarts4r/index.html",
    "title": "Data Viz with Echarts4r",
    "section": "",
    "text": "By David Munoz Tord\nGoal: Learn about data visualization and familiarize yourself with some of the basic functions of the {echarts4r}.\n{echarts4r} is back! And with version 4.5 the new features from version 5 of echarts.js are available now. Moreover, the morphing capabilities of echart.js have been ported to echarts4r as we will show in this post.\nRead more about it\nYou can morph between plot like this:\n\n\nlibrary(echarts4r)\n## Warning: le package 'echarts4r' a été compilé avec la version R 4.2.3\n\nmtcars2 &lt;- mtcars |&gt; \n  head() |&gt; \n  tibble::rownames_to_column(\"model\")\n\ne1 &lt;- mtcars2 |&gt; \n  e_charts(model) |&gt; \n  e_bar(\n    carb, \n    universalTransition = TRUE,\n    animationDurationUpdate = 1000L\n  )\n\ne2 &lt;- mtcars2 |&gt; \n  e_charts(model) |&gt; \n  e_pie(\n    carb, \n    universalTransition = TRUE,\n    animationDurationUpdate = 1000L\n  )\n\ncb &lt;- \"() =&gt; {\n  let x = 0;\n  setInterval(() =&gt; {\n    x++\n    chart.setOption(opts[x % 2], true);\n  }, 3000);\n}\"\n\n\n\n\ne_morph(e1, e2, callback = cb)\n## Warning in e_morph(e1, e2, callback = cb): This is experimental\n\n\n\nMorph between graphs."
  },
  {
    "objectID": "posts/llm/index.html",
    "href": "posts/llm/index.html",
    "title": "Your first chat bot with python!",
    "section": "",
    "text": "By David Munoz Tord\nGoal: Learn about language models and familiarize yourself with some of the basic functions of the {languagemodels} to create your own chat bot.\n{languagemodels} is a python module designed to be as simple as possible for learners and educators exploring how large language models intersect with modern software development. The interfaces to this package are all simple functions using standard types. The complexity of large language models is hidden from view while providing free local inference using light-weight, open models. All included models are free for educational use, no API keys are required, and all inference is performed locally by default.\nRead more about it\nYou can morph between plot like this:\n\nimport languagemodels as lm\nlm.do(\"What color is the sky?\")\n\n\nTo easy, let’s try something a bit harder\n\nlm.do(\"If I have 7 apples then eat 5, how many apples do I have?\")\n\nAouch…\nIndeed the model performance is quite low because the models used by this package are 1000x smaller than the largest models in use today. They are useful as learning tools, but if you are expecting ChatGPT or similar performance, you will be very disappointed…\nThe base model should work on any system with 512MB of memory, but this memory limit can be increased. Setting this value higher will require more memory and generate results more slowly, but the results should be superior. Let’s try:\n\nlm.set_max_ram('4gb')\nlm.do(\"If I have 7 apples then eat 5, how many apples do I have?\")\n\nYeah, here we go little (4gb) buddy!\n\nNow that we got the basics, let’s play with it!\n\nlm.chat('''\n     System: Respond as a helpful assistant.\n\n     User: What is relativity?\n\n     Assistant:\n     ''')\n\n\n\nlm.complete(\"She hid in her room until\")\n\n\n\nlm.get_wiki(\"Physics\")"
  },
  {
    "objectID": "posts/R-Lunches/index.html",
    "href": "posts/R-Lunches/index.html",
    "title": "R Lunches in university of Geneva",
    "section": "",
    "text": "By David Munoz Tord\nR lunches are multidisciplinary meetings on R at UniMail.\nWe finished this semester R Lunches but you can still find the video links if you missed one!\nRead more about it"
  },
  {
    "objectID": "posts/R_road_map/Index.html",
    "href": "posts/R_road_map/Index.html",
    "title": "R Road Map",
    "section": "",
    "text": "R Learning Roadmap for Budding Data Scientists and Statisticians\nHey there, future statistician and data scientist! Welcome to the wonderful world of R, a programming language specifically designed for data analysis, statistics, and graphical representation. Whether you’re a statistician looking to expand your toolkit or an aspiring data scientist eager to dive into data manipulation and visualization, this roadmap is your guiding star.\nNote: This blog will probably evolve with the new content we are providing on YouTube.\n\n\nWhy R?\nR is a flexible and powerful tool. Developed by statisticians, for statisticians, it boasts an incredible ecosystem of packages, making it one of the most popular choices for data-driven tasks. Plus, it’s free and open source!\n\n\n\nR Learning Roadmap\nThis roadmap is divided into four main categories:\n\nFoundation\nIntermediate Techniques\nAdvanced Analysis\nSpecialized Areas\n\nLet’s break these down!\n\n\n1. Foundation\nBefore you can master the intricate techniques of data science and statistics in R, you need to get the basics right.\nBase: Learn how to install R and Rstudio, the basics of synthaxis, the first types and how to create functions.\n\nBase R playlist\nManagment: Learn how to use the language and its dedicated editor to their full potential, with tips and basics.\n\nStatistic with R playlist\nStatistic: Learn the basics of statistical analysis and conduct your first study from A to Z using all the tools available in R.\n\n\n\n\n2. Intermediate Techniques\nWith the basics in hand, let’s delve deeper!\nData workflow: Learn the basics of the Tidyverse and master data manipulation. You can learn it at any level.\n\nTidyverse playlist\n\nData Manipulation: Master the dplyr package for tasks like filtering, arranging, and summarizing data. You’ll love the pipe (%&gt;%) operator!\nAdvanced Visualization: Get to know ggplot2, the most popular visualization package in R. The Grammar of Graphics will revolutionize how you think about plotting.\n\n\nggplot2 playlist\n\nData Cleaning: tidyr is your friend here. Learn techniques like pivot, separate, and unite.\n\n\n\n\n3. Advanced Analysis\nNow, let’s dive deep!\n\nAdvanced Statistical Modeling: Explore more advanced techniques like multiple regression, logistic regression, and ANOVA.\nMachine Learning: With packages from the Tidymodel, dive into classification, clustering, and regression models.\nTime Series Analysis: Use packages like forecast for time series decomposition and forecasting.\nReporting: Learn how to knit your R Markdown documents into interactive HTML, PDFs, and slideshows to share your findings.\n\n\n\n\n4. Specialized Areas\nDepending on your interest, there’s always more to explore:\n\nText Mining: With quanteda and tidytext, dive into the world of NLP.\nGeospatial Analysis: sf and leaflet will help you work with spatial data.\nBioinformatics: If you’re into biology, Bioconductor provides tools for bioinformatics.\nShiny Apps: Turn your analyses into interactive web applications with shiny.\n\n\n\n\n\nFinal Words\nRemember, the journey of learning R, like all things, is best taken one step at a time. You might feel overwhelmed initially, but trust the process. With each line of code, each plot, and each model, you’re getting better.\nHappy coding, and here’s to your data-driven adventures with R!"
  },
  {
    "objectID": "posts/Terminal_Basic/index.html",
    "href": "posts/Terminal_Basic/index.html",
    "title": "Learn Terminal Basics",
    "section": "",
    "text": "By Fabrice Hategekimana\nVideo series on terminal automation. We explain why working with the terminal is still a good idea.\nPlaylist here\nNote: video in french, ask in comments for subtitle in your language"
  },
  {
    "objectID": "posts/Terminal_Basic/index.html#first-video-of-the-playlist",
    "href": "posts/Terminal_Basic/index.html#first-video-of-the-playlist",
    "title": "Learn Terminal Basics",
    "section": "First video of the playlist:",
    "text": "First video of the playlist:"
  },
  {
    "objectID": "index.html#this-october",
    "href": "index.html#this-october",
    "title": "Blog WeData",
    "section": "",
    "text": "Blabla help us …"
  },
  {
    "objectID": "index.html#latest-content",
    "href": "index.html#latest-content",
    "title": "Blog WeData",
    "section": "Latest content",
    "text": "Latest content"
  },
  {
    "objectID": "index.html#pseudo-data-science-is-a-term-we-use-to-describe-attempts-to-pass-off-crude-work-as-being-more-data-science-y-than-it-really-is.-that-reflects-a-sense-in-public-life-that-data-science-is-new-innovative-somehow-the-future.-in-this-context-people-who-are-not-data-scientists-can-be-tempted-to-dress-themselves-up-in-the-clothes-of-data-science-to-enhance-their-credibility.-the-trouble-is-it-can-sometimes-backfire.",
    "href": "index.html#pseudo-data-science-is-a-term-we-use-to-describe-attempts-to-pass-off-crude-work-as-being-more-data-science-y-than-it-really-is.-that-reflects-a-sense-in-public-life-that-data-science-is-new-innovative-somehow-the-future.-in-this-context-people-who-are-not-data-scientists-can-be-tempted-to-dress-themselves-up-in-the-clothes-of-data-science-to-enhance-their-credibility.-the-trouble-is-it-can-sometimes-backfire.",
    "title": "Blog WeData",
    "section": "Pseudo data science is a term we use to describe attempts to pass off crude work as being more data science-y than it really is. That reflects a sense in public life that data science is new, innovative, somehow the Future. In this context, people who are not data scientists can be tempted to dress themselves up in the clothes of data science to enhance their credibility. The trouble is, it can sometimes backfire.",
    "text": "Pseudo data science is a term we use to describe attempts to pass off crude work as being more data science-y than it really is. That reflects a sense in public life that data science is new, innovative, somehow the Future. In this context, people who are not data scientists can be tempted to dress themselves up in the clothes of data science to enhance their credibility. The trouble is, it can sometimes backfire.\nEd Humpherson on how not to be misleading\n\nRead the full article"
  },
  {
    "objectID": "index.html#data-science-careers",
    "href": "index.html#data-science-careers",
    "title": "Blog WeData",
    "section": "Data Science Careers",
    "text": "Data Science Careers"
  },
  {
    "objectID": "blogposts/posts/Terminal_Basic/index.html",
    "href": "blogposts/posts/Terminal_Basic/index.html",
    "title": "Learn Terminal Basics",
    "section": "",
    "text": "By Fabrice Hategekimana\nVideo series on terminal automation. We explain why working with the terminal is still a good idea.\nPlaylist here\nNote: video in french, ask in comments for subtitle in your language"
  },
  {
    "objectID": "blogposts/posts/Terminal_Basic/index.html#first-video-of-the-playlist",
    "href": "blogposts/posts/Terminal_Basic/index.html#first-video-of-the-playlist",
    "title": "Learn Terminal Basics",
    "section": "First video of the playlist:",
    "text": "First video of the playlist:"
  },
  {
    "objectID": "blogposts/posts/R-Lunches/index.html",
    "href": "blogposts/posts/R-Lunches/index.html",
    "title": "R Lunches in university of Geneva",
    "section": "",
    "text": "By David Munoz Tord\nR lunches are multidisciplinary meetings on R at UniMail.\nWe finished this semester R Lunches but you can still find the video links if you missed one!\nRead more about it"
  },
  {
    "objectID": "blogposts/posts/Echarts4r/index.html",
    "href": "blogposts/posts/Echarts4r/index.html",
    "title": "Data Viz with Echarts4r",
    "section": "",
    "text": "By David Munoz Tord\nGoal: Learn about data visualization and familiarize yourself with some of the basic functions of the {echarts4r}.\n{echarts4r} is back! And with version 4.5 the new features from version 5 of echarts.js are available now. Moreover, the morphing capabilities of echart.js have been ported to echarts4r as we will show in this post.\nRead more about it\nYou can morph between plot like this:\n\n\nlibrary(echarts4r)\n\nmtcars2 &lt;- mtcars |&gt; \n  head() |&gt; \n  tibble::rownames_to_column(\"model\")\n\ne1 &lt;- mtcars2 |&gt; \n  e_charts(model) |&gt; \n  e_bar(\n    carb, \n    universalTransition = TRUE,\n    animationDurationUpdate = 1000L\n  )\n\ne2 &lt;- mtcars2 |&gt; \n  e_charts(model) |&gt; \n  e_pie(\n    carb, \n    universalTransition = TRUE,\n    animationDurationUpdate = 1000L\n  )\n\ncb &lt;- \"() =&gt; {\n  let x = 0;\n  setInterval(() =&gt; {\n    x++\n    chart.setOption(opts[x % 2], true);\n  }, 3000);\n}\"\n\n\n\n\ne_morph(e1, e2, callback = cb)\n## Warning in e_morph(e1, e2, callback = cb): This is experimental\n\n\n\nMorph between graphs."
  },
  {
    "objectID": "blogposts/posts/llm/index.html",
    "href": "blogposts/posts/llm/index.html",
    "title": "Your first chat bot with python!",
    "section": "",
    "text": "By David Munoz Tord\nGoal: Learn about language models and familiarize yourself with some of the basic functions of the {languagemodels} to create your own chat bot.\n{languagemodels} is a python module designed to be as simple as possible for learners and educators exploring how large language models intersect with modern software development. The interfaces to this package are all simple functions using standard types. The complexity of large language models is hidden from view while providing free local inference using light-weight, open models. All included models are free for educational use, no API keys are required, and all inference is performed locally by default.\nRead more about it\nYou can morph between plot like this:\n\nimport languagemodels as lm\nlm.do(\"What color is the sky?\")\n\n\nTo easy, let’s try something a bit harder\n\nlm.do(\"If I have 7 apples then eat 5, how many apples do I have?\")\n\nAouch…\nIndeed the model performance is quite low because the models used by this package are 1000x smaller than the largest models in use today. They are useful as learning tools, but if you are expecting ChatGPT or similar performance, you will be very disappointed…\nThe base model should work on any system with 512MB of memory, but this memory limit can be increased. Setting this value higher will require more memory and generate results more slowly, but the results should be superior. Let’s try:\n\nlm.set_max_ram('4gb')\nlm.do(\"If I have 7 apples then eat 5, how many apples do I have?\")\n\nYeah, here we go little (4gb) buddy!\n\nNow that we got the basics, let’s play with it!\n\nlm.chat('''\n     System: Respond as a helpful assistant.\n\n     User: What is relativity?\n\n     Assistant:\n     ''')\n\n\n\nlm.complete(\"She hid in her room until\")\n\n\n\nlm.get_wiki(\"Physics\")"
  },
  {
    "objectID": "blogposts/posts/Coding_road_map/Index.html",
    "href": "blogposts/posts/Coding_road_map/Index.html",
    "title": "A Computer Science Roadmap",
    "section": "",
    "text": "A Computer Science Roadmap: From Theory to Mastery\nHey there, future coding maestro! Venturing into the vast realm of computer science can seem intimidating. Fear not! This roadmap will guide you through theoretical foundations, essential languages, and core software engineering practices, all while encouraging you to explore further.\nNote: It’s clearly an exaggeration to sum up all computer science learning in a single post. In reality, each part deserves its own roadmap. But for the moment we’re content with this because of the structure of our channel. When we get more content on our YouTube channel, we’ll be making a lot of changes to this roadmap. So, don’t see this content as the entirety of what you need to learn, but simply as the beginning of a journey under construction!\n\n\n1. Theoretical Foundations\nBefore diving into coding, understanding the basics will serve you well throughout your journey.\n\nAlgorithms & Data Structures: Learn how algorithms work and why certain data structures are preferred for specific tasks.\n\n\n\n\n2. Introduction to Shell Programming\nThe command-line interface (CLI) is a powerful tool.\nBasic\n\nBasics of CLI: Navigate directories, manage files, and get comfortable with the terminal.\nShell Scripting: Automate tasks using bash (or your shell of choice) scripting.\n\n\n\nModern Shell: Let’s discover some modern shell and their interesting features. Here we dive into Nushell!\n\n\n\n\n\n3. Python\nA versatile language with a gentle learning curve.\n\nPython Basics: Variables, loops, conditions, and functions.\n\n\n\nAdvanced Python: Object-oriented programming, list comprehensions, and modules.\nPython Ecosystem: Libraries like numpy, pandas, and flask to supercharge your projects.\n\n\n\n\n4. Rust\nA language focusing on performance and safety.\n\nRust Fundamentals: Understand ownership, borrowing, and lifetimes.\n\n\n\nConcurrency in Rust: Explore Rust’s approach to threads and safe concurrent programming.\n\n\n\n\n5. Haskell\nDive into the world of functional programming.\n\nHaskell Basics: Grasp the idea of pure functions, immutability, and laziness.\nFunctional Paradigms: Monads, functors, and lambdas.\n\n\n\n\n6. Go (Golang)\nSimplicity and efficiency in one package.\n\nGo Essentials: Learn the straightforward syntax, Goroutines, and channels.\nWeb with Go: Build robust web applications using Go’s standard library.\n\n\n\n\n7. C++\nA high-performance language used in system/software development.\n\nC++ Fundamentals: Classes, objects, inheritance, and polymorphism.\nSTL: Dive deep into the Standard Template Library and its offerings.\n\n\n\n\n8. JavaScript\nThe backbone of the modern web.\n\nJavaScript Basics: Understand variables, functions, and DOM manipulation.\nModern JavaScript: Explore ES6 and beyond. Asynchronous operations, Promises, and Fetch API.\nFrameworks: Get to know popular frameworks like React, Vue, and Angular.\n\n\n\n\n9. Software Engineering\nBeyond coding, there’s the art of building software.\n\nVersion Control: Get proficient with Git.\nDesign Patterns: Understand common software design patterns and their applications.\n\n\n\nTesting: Learn the importance of testing and various methodologies, from unit tests to integration tests.\n\n\n\n\n\n10. Vim\nThe quintessential text editor.\n\nVim Basics: Understand modes, basic navigation, and editing commands.\n\n\n\nAdvanced Vim: Buffers, windows, plugins, and custom configurations.\n\n\n\n\n11. Exploring New Languages\nNever stop learning!\n\nResearch: Look for emerging languages and their use cases.\n\n\n\nExperiment: Play with sample projects, build simple applications, and test their potential. It doesn’t matter if you’re ignorant to begin with - the most important thing is to discover new things.\n\n\n\n\n\nFinal Words\nRemember, the world of computer science is vast, and this roadmap is just the beginning. Trust in your ability to learn and grow. Every error, every compiled code, and every successfully deployed application is a step forward.\nHappy coding and may your journey through computer science be filled with wonder!"
  },
  {
    "objectID": "blogposts/posts/2023-07-16-contributing-to-project-on-github/index.html#start-small-aim-big",
    "href": "blogposts/posts/2023-07-16-contributing-to-project-on-github/index.html#start-small-aim-big",
    "title": "Contributing to projects on GitHub",
    "section": "Start Small, Aim Big",
    "text": "Start Small, Aim Big\nFirst things first, let’s get this out of the way. There is no such thing as a ‘too small’ contribution. Even a single-line change, fixing a typo, or enhancing the readability of a README file – these seemingly minuscule contributions already have an impact in open-source projects."
  },
  {
    "objectID": "blogposts/posts/2023-07-16-contributing-to-project-on-github/index.html#the-perks-of-contributing",
    "href": "blogposts/posts/2023-07-16-contributing-to-project-on-github/index.html#the-perks-of-contributing",
    "title": "Contributing to projects on GitHub",
    "section": "The Perks of Contributing",
    "text": "The Perks of Contributing\n“But why should I contribute?”, you might ask. Excellent question! Here’s why:\n\nPersonal Growth: Contributing to open-source projects can improve your skills, give you practical experience, expand your network, and even potentially catch the eyes of potential employers or collaborators. Your GitHub account is a portfolio that show what your are doing, it is the solid proof of your competences.\nImproving the Software: By contributing, you help in maintaining and enhancing the project, ensuring its longevity and reliability. That’s why we recommand you to chose projets that you like or could bring you valuable outcome in your coding learning.\nTake and Give: Contributing is a fantastic way to give back to the community that has probably helped you in one way or another."
  },
  {
    "objectID": "blogposts/posts/2023-07-16-contributing-to-project-on-github/index.html#your-first-contribution",
    "href": "blogposts/posts/2023-07-16-contributing-to-project-on-github/index.html#your-first-contribution",
    "title": "Contributing to projects on GitHub",
    "section": "Your First Contribution",
    "text": "Your First Contribution\nFor the rest of the tutorial you need to have a GitHub account and to understand how it works. If you don’t know there are, here are some tutorials:\n\nEnglish\nFrench\nGerman\n\nIf you have the basic of Git and GitHub, let’s get started. Here’s the nitty-gritty:\n\nChoose your Quest: Find a project that piques your interest. It could be anything, from a complex machine learning library to a simple script that automates meme generation (because who doesn’t love memes?). Keep in mind to chose projects that goes into your interest and that can bring you joy and wisdom. Even if the project seems chalenging and you think you don’t have the level, just ask the owner of the project what you can bring to it at your level. Even doing the documentation is a good way to start (See bellow in ==complet here==). Sometimes owner of project write themselve what are the things to take care of and openly ask for help in specific area (or in the whole project).\nFork it: Fork the repository to your account. Think of it as creating your own magic clone of the project where you can tinker without disturbing the original.\nClone it: Clone the forked repository onto your local machine. Basically, it’s like summoning your cloned project from the cloud onto your computer.\nCreate a Branch: It’s always a good practice to create a new branch for your changes. Consider this as creating a parallel universe where your changes won’t affect the main storyline.\nMake Changes: Here comes the fun part. Dive in and make your changes. Remember, no contribution is too small.\nCommit and Push: Once you’re satisfied with your changes, commit them with a clear, informative message and push them to your forked repository.\nPull Request (PR): Back on the GitHub site, you can now open a PR against the original repository. It is sending your change to the main project online. Then the owner of the project can read your changes and see if they can accept it.\nWait: Now, the repository owner reviews your changes. If they like them, they’ll merge them into the project. Congrats, you just made your first contribution!\nCelebrate: Grab yourself a cake, you’ve earned it!"
  },
  {
    "objectID": "blogposts/posts/2023-07-16-contributing-to-project-on-github/index.html#quick-tricks-for-a-rapid-start",
    "href": "blogposts/posts/2023-07-16-contributing-to-project-on-github/index.html#quick-tricks-for-a-rapid-start",
    "title": "Contributing to projects on GitHub",
    "section": "Quick Tricks for a Rapid Start",
    "text": "Quick Tricks for a Rapid Start\nAlright, here are some tricks for a fast start:\n\n‘Good First Issues’: Many repositories tag some issues as Good First Issues or ‘Beginner-Friendly’. These are perfect for getting your feet wet. You can then go to GitHub and look for those terms in the search bar.\nRead the Docs: Always, ALWAYS, read the project’s README and CONTRIBUTING guide before starting. Every repository is a new world with its own set of rules.\nCommunicate: Open-source is all about collaboration. If you’re unsure about something, just ask. The community is generally friendly and helpful.\nDon’t Fear Rejection: Sometimes your changes might not get accepted. That’s okay! Each rejection is a stepping stone to improvement. Learn from it, and keep contributing.\n\nIn the end, contributing to GitHub is not just about writing code, it’s about being a part of something bigger than yourself. So, are you ready to contribute your skills of GitHub?"
  },
  {
    "objectID": "blogposts/posts/2023-07-16-contributing-to-project-on-github/index.html#the-r-case-contributing-to-r-packages",
    "href": "blogposts/posts/2023-07-16-contributing-to-project-on-github/index.html#the-r-case-contributing-to-r-packages",
    "title": "Contributing to projects on GitHub",
    "section": "The R case: Contributing to R Packages",
    "text": "The R case: Contributing to R Packages\nIf you’re familiar with the R’s universe, contributing to R packages can be a rewarding adventure. Why? Because in this realm, the structure is your friend. You’ll find it’s not just facile but rather enjoyable!\n\nWhy Contribute to R Packages?\nR packages are the lifeblood of the R ecosystem, facilitating data analysis, visualization, and much more. When you contribute to R packages, you are helping to enhance the functionality, efficiency, and reliability of these packages.\n\n\nHow to Contribute to R Packages?\nThe best ressource to learn how to create solid packages in R is the following book freely available online: R packages\nHere are some interesting steps to guide you through the process:\n\nIdentify the Package: First, identify the R package you want to contribute to. It could be a R package you use often or one you believe could benefit from your magical touch. For instance you could have noticed specific error or way to improve it in your taste that could please others.\nCheck the Package Guidelines: Each R package usually has its own contribution guidelines. Take a moment to read these, as they often contain valuable information on the package’s style and testing procedures. Remember, when in Rome, do as the Romans do.\nSetup Your R Environment: You will need an integrated development environment (IDE) for R. RStudio is a fantastic choice (VS Code is also a good choice). Next, install the devtools package. This package provide functions to simplify package development and maintenance.\nTo install devtools, you can use:\ninstall.packages(\"devtools\")\nFork and Clone the Package: Similar to the steps described earlier, fork the repository of the package to your GitHub account, and then clone it onto your local machine.\nLoad the Package: To load the package in R, use the load_all() function from the devtools package. This function loads all the functions and data in the package into your R environment, which lets you test your changes quickly and easily.\ndevtools::load_all()\nBranch Out: As with other contributions, it’s wise to create a new branch for your changes.\nMake Changes: Sprinkle your magic dust. You can add features, fix bugs, improve documentation, or even enhance performance.\nTest Your Changes: Testing is crucial. Use the test() function from the devtools package to run the package’s test cases and ensure your changes don’t break anything.\ndevtools::test()\nDocument Your Changes: Use the document() function from devtools to update the package documentation.\ndevtools::document()\nCommit, Push, and PR: Once satisfied with your changes, commit them with a meaningful message, push to your forked repository, and open a PR against the original repository.\n\nR package development has its charms and challenges, but the joy of contributing and improving the package for the entire R community is undoubtedly enchanting."
  },
  {
    "objectID": "blogposts/posts/Stats_With_R/index.html",
    "href": "blogposts/posts/Stats_With_R/index.html",
    "title": "Satistics with R",
    "section": "",
    "text": "By Vestin Hategekimana\nGoal: To cover the structure of a classical statistical analysis with R. We will then go into more depth on each part while presenting packages in the language that make the work easier. Although this playlist is designed for social science students, it can be useful for anyone.\nPlaylist here\nNote: video in french, ask in comments for subtitle in your language"
  },
  {
    "objectID": "blogposts/posts/Stats_With_R/index.html#first-video-of-the-playlist",
    "href": "blogposts/posts/Stats_With_R/index.html#first-video-of-the-playlist",
    "title": "Satistics with R",
    "section": "First video of the playlist:",
    "text": "First video of the playlist:"
  },
  {
    "objectID": "blogposts/posts/R_road_map/Index.html",
    "href": "blogposts/posts/R_road_map/Index.html",
    "title": "R Road Map",
    "section": "",
    "text": "R Learning Roadmap for Budding Data Scientists and Statisticians\nHey there, future statistician and data scientist! Welcome to the wonderful world of R, a programming language specifically designed for data analysis, statistics, and graphical representation. Whether you’re a statistician looking to expand your toolkit or an aspiring data scientist eager to dive into data manipulation and visualization, this roadmap is your guiding star.\nNote: This blog will probably evolve with the new content we are providing.\n\n\nWhy R?\nR is a flexible and powerful tool. Developed by statisticians, for statisticians, it boasts an incredible ecosystem of packages, making it one of the most popular choices for data-driven tasks. Plus, it’s free and open source!\n\n\n\nR Learning Roadmap\nThis roadmap is divided into four main categories:\n\nFoundation\nIntermediate Techniques\nAdvanced Analysis\nSpecialized Areas\n\nLet’s break these down!\n\n\n1. Foundation\nBefore you can master the intricate techniques of data science and statistics in R, you need to get the basics right.\nBase: Learn how to install R and Rstudio, the basics of synthaxis, the first types and how to create functions.\n\nManagment: Learn how to use the language and its dedicated editor to their full potential, with tips and basics.\n\nStatistic: Learn the basics of statistical analysis and conduct your first study from A to Z using all the tools available in R.\n\n\n\n\n2. Intermediate Techniques\nWith the basics in hand, let’s delve deeper!\nData workflow: Learn the basics of the Tidyverse and master data manipulation. You can learn it at any level.\n\nData Manipulation: Master the dplyr package for tasks like filtering, arranging, and summarizing data. You’ll love the pipe (%&gt;%) operator!\n\n\n\nAdvanced Visualization: Get to know ggplot2, the most popular visualization package in R. The Grammar of Graphics will revolutionize how you think about plotting.\nData Cleaning: tidyr is your friend here. Learn techniques like pivot, separate, and unite.\n\n\n\n\n\n3. Advanced Analysis\nNow, let’s dive deep!\n\nAdvanced Statistical Modeling: Explore more advanced techniques like multiple regression, logistic regression, and ANOVA.\nMachine Learning: With packages from the Tidymodel, dive into classification, clustering, and regression models.\nTime Series Analysis: Use packages like forecast for time series decomposition and forecasting.\nReporting: Learn how to knit your R Markdown documents into interactive HTML, PDFs, and slideshows to share your findings.\n\n\n\n\n4. Specialized Areas\nDepending on your interest, there’s always more to explore:\n\nText Mining: With quanteda and tidytext, dive into the world of NLP.\nGeospatial Analysis: sf and leaflet will help you work with spatial data.\nBioinformatics: If you’re into biology, Bioconductor provides tools for bioinformatics.\nShiny Apps: Turn your analyses into interactive web applications with shiny.\n\n\n\n\n\nFinal Words\nRemember, the journey of learning R, like all things, is best taken one step at a time. You might feel overwhelmed initially, but trust the process. With each line of code, each plot, and each model, you’re getting better.\nHappy coding, and here’s to your data-driven adventures with R!"
  },
  {
    "objectID": "blogposts/posts/Data_manip_Fundamental/index.html",
    "href": "blogposts/posts/Data_manip_Fundamental/index.html",
    "title": "Data Manipulation with R",
    "section": "",
    "text": "By David Munoz Tord\nGoal: Learn more about data manipulation: how to pivot, join and filter data using {dplyr} and {tidyr} packages.\nOpen it full\nNote: All in english"
  },
  {
    "objectID": "blogposts/posts/2023-07-16-you-must-use-rproject/index.html",
    "href": "blogposts/posts/2023-07-16-you-must-use-rproject/index.html",
    "title": "You must use projects with RStudio!",
    "section": "",
    "text": "Rprojects"
  },
  {
    "objectID": "blogposts/posts/2023-07-16-you-must-use-rproject/index.html#lets-start-using-projects-right-now",
    "href": "blogposts/posts/2023-07-16-you-must-use-rproject/index.html#lets-start-using-projects-right-now",
    "title": "You must use projects with RStudio!",
    "section": "Let’s start using projects right now!",
    "text": "Let’s start using projects right now!\nHello budding data scientist! Welcome to another thrilling journey in the enigmatic world of coding. Today, we’re here to chat about a topic so fascinating that it might just outshine your grandmother’s knitting saga. It’s the “Project” feature in RStudio. Yes, you heard it right - it’s time to unravel the secret weapon that will catapult you to new heights in your R journey.\nBefore we embark, let’s clarify something. What’s RStudio, you ask? RStudio is an integrated development environment (IDE) for R, a programming language for statistical computing and graphics. If R is a car, then RStudio is the fancy garage where you improve it up and give it a good polish. But hey, even in the best garages, there are tools that are underused – and ‘projects’ is the underappreciated power drill that’s gathering dust in the corner."
  },
  {
    "objectID": "blogposts/posts/2023-07-16-you-must-use-rproject/index.html#what-are-projects-in-rstudio",
    "href": "blogposts/posts/2023-07-16-you-must-use-rproject/index.html#what-are-projects-in-rstudio",
    "title": "You must use projects with RStudio!",
    "section": "What are projects in RStudio?",
    "text": "What are projects in RStudio?\nImagine having a room so messy, you can’t tell the difference between your cat and a fur-lined sweater. Now, think of projects as a giant storage box that allows you to organize your mess (or codes, in our case) and avoid getting your data files, scripts, and outputs mixed up. Remember, no one wants to find a sock in their sandwich!\nSo, in RStudio, a Project is essentially a way to keep all relevant files and specific settings in a single place. Every time you open a Project, RStudio knows exactly where it is, it gets its bearings, and has the sense not to look for your datasets in your downloads or image folder.\nprojects are like trusty sidekicks in the world of programming. They keep our work organized and shielded from the chaos of the digital universe. Just like RStudio’s Rproject, other editors have their own quirky projects. Visual Studio has projects, Sublime Text has projects, and even your grandma’s ancient text editor might have a project feature. projects are like clean bubbles for our code, ensuring it remains unperturbed by the messy dance of files on our computers.\nNote: stop making excuses\nListen up, fellow statisticians! Just because you’re more into numbers than code doesn’t mean you get a free pass on staying desorganized. When you’re knee-deep in dissertations or buried under a pile of homework, you don’t scatter your papers haphazardly around the room, do you? No way! You keep everything in one place, separated from the rest of the chaos. It’s like having a binder for each subject and dividers for each assignment—clear, simple, and organized. projects are no different, my friends! They’re like those fancy binders, but for your digital life. They corral all your code, data, and documentation into one neat little package, shielding it from the tumultuous whirlwind of your computer’s file system."
  },
  {
    "objectID": "blogposts/posts/2023-07-16-you-must-use-rproject/index.html#why-should-you-use-them",
    "href": "blogposts/posts/2023-07-16-you-must-use-rproject/index.html#why-should-you-use-them",
    "title": "You must use projects with RStudio!",
    "section": "Why should you use them?",
    "text": "Why should you use them?\n\n1. Stay organized\nImagine having to find the latest script in a haystack of documents or a file saved under a particularly “creative” name like “final_script_v3.2_final_FINAL.R”. A nightmare, isn’t it? With projects, every file you need is in one place - no more, no less. It’s like having a drawer labeled ‘Socks’: you’re not going to find a shirt in there!\n\n\n2. Maintain your working directory\nYour working directory is like your home base in R. With projects, every time you open a particular Project, RStudio sets the working directory to the project’s directory. No more lengthy codes with numerous file paths. It’s like waking up in your own bed every morning, not in the middle of a supermarket.\n\n\n3. Work on multiple projects\nLet’s say you’re juggling different projects, like a statistical analysis of avocado prices and a predictive model for the lottery. You don’t want your avocados messing with your lotto dreams, right? With RStudio projects, you can keep them separate and switch between them seamlessly. It’s like having different rooms for different tasks in your house.\n\n\n4. Share and collaborate\nIf you’ve tried to share your R code with someone who couldn’t run it because they didn’t have their directories set up like yours, then you’ll love projects. They allow other people to run your code without getting tangled up in missing file errors. It’s the equivalent of sending someone a packed lunch with instructions instead of sending them to forage in your fridge.\nIn conclusion, using projects in RStudio is like having a personal assistant who’s a pro at organizing, file managing, and ensuring you don’t get your socks mixed up with your sandwiches. And trust me, in the bustling kitchen of R programming, you’re going to want that!"
  },
  {
    "objectID": "blogposts/posts/2023-07-16-you-must-use-rproject/index.html#the-cost-of-ignoring-rstudios-projects",
    "href": "blogposts/posts/2023-07-16-you-must-use-rproject/index.html#the-cost-of-ignoring-rstudios-projects",
    "title": "You must use projects with RStudio!",
    "section": "The cost of ignoring Rstudio’s projects",
    "text": "The cost of ignoring Rstudio’s projects\nWhile coding in R can be a delightful and rewarding experience, there’s a peculiar habit that seems to persist among some developers—a reluctance to embrace the wonders of Rproject. In this blog post, we shall explore the mishaps and frustrations that arise from ignoring Rproject, highlighting the importance of this indispensable tool. So buckle up, and let’s embark on this humorous journey together!\n\n1. Absolute paths and why you should avoid using them\n\nIf you don’t know what absolute paths are\nAh, absolute paths and relative paths, the dynamic duo of file navigation! Think of them as Batman and Robin, but with fewer capes and more directory drama.\nAbsolute paths are like treasure maps that provide the exact coordinates to your desired file or directory. They start from the root of your computer.\nExamples\nWindows:\n\"C:\\Users\\Username\\Documents\\Project\\Folder\\File.txt\"\n\nMac:\n\"/Users/Username/Documents/Project/Folder/File.txt\"\n\nLinux:\n\"/home/Username/Documents/Project/Folder/File.txt\"\nOn the other hand, relative paths are more like giving directions to your friend using landmarks. You guide them based on his current location. It’s like saying, “Go three steps to the right, pass the coffee shop, and you’ll find the mystical file you seek”.\nThe example assume that your current working directory (where your R script or project is located) is at: C:\\Users\\Username\\Documents\\Project\\\nTo navigate to a file named File.txt located in the Folder directory within the current working directory, the relative path would be:\nWindows:\n'Folder\\File.txt'\n\nMac:\n'Folder/File.txt'\n\nLinux:\n'Folder/File.txt'\nIn R, to use relative paths, you simply do the same. If you want more options simply embrace the power of the dots! Use “..” to navigate up one level in the directory hierarchy and “.” to represent the current directory.\nAssume that your current working directory (where your R script or project is located) is at: C:\\Users\\Username\\Documents\\Project\\\nTo navigate to the folder Document which is one level up you would use:\nWindows:\n'..\\'\n\nMac:\n'../'\n\nLinux:\n'../'\nNow, here comes the thrilling part! Inside RStudio, imagine the tab key as a magical wand. When you’re typing a file or directory name within quotation marks, tap that tab key, and behold! A navigation bar appears, offering you a smorgasbord of choices. So, unleash your inner explorer, play with the relative paths, and tap that tab key like a maestro.\n\n\nBack to the dramatic inconvenience of absolute paths\nPicture this: You’ve written a fantastic piece of code in R, filled with wit, charm, and impeccable logic. But there’s a twist—your code contains an absolute file path. Now, when someone else attempts to run your code on their machine, it’s as if you’ve sent them on a mystery tour, wandering through file directories to locate the missing pieces. Be careful! Using the setwd() function (and even worse, the ctrl+shift+H shortcut) doesn’t solve the problem at all. You’re still using absolute paths, which will have to be changed manually by your victim - sorry, I mean colleague! Avoid this problem by utilizing Rproject, which enables you to maintain relative paths and keeps everyone on the same page.\n\n\n\n2. Mixed files\nImagine a symphony performance where each musician plays a different piece entirely. Irritating, right? Well, that’s what happens when you have mixed files scattered across different locations. One file resides in your “Documents” folder, while another hides in the depths of your “Downloads” folder. When collaborating or sharing your code, chaos ensues, leaving others scratching their heads. Rproject corrals all your files into a neat and tidy package, ensuring harmony and preserving the sanity of those who dare to read your code.\n\n\n3. Versioning woes\nAh, the bane of every programmer’s existence—versioning woes. Without Rproject, you enter the realm of time travel bugs, where code from a different era unexpectedly emerges. You find yourself debugging issues that were resolved ages ago, akin to encountering a T-Rex in a modern metropolis. With Rproject, version control systems like Git become your trusty time-traveling companions, allowing you to journey through the annals of code history with ease. Let’s not forget renv, but it will be the topic for another blog post!\n\n\n4. Size doesn’t matter\n“But my project is tiny! I don’t need Rproject,” you protest. Well, dear reader, even the tiniest projects deserve some love and organization. Rproject is not solely for colossal undertakings but a best practice that can save you from future headaches. Plus, it’s a delightful excuse to embark on an adventure, designing your own little universe within RStudio. Alternatively, you can always create a “Test” folder .\nNow, we understand that sometimes you just want to run a quick test, free from the constraints of a formal project. Fear not, intrepid adventurer! You can alter the default path of RStudio and create a whimsical “Test” folder where you can safely experiment and play. It’s a haven for all your quick tests and a sanctuary for spontaneous code escapades (see below in “Test and Project - Yin and Yang”)."
  },
  {
    "objectID": "blogposts/posts/2023-07-16-you-must-use-rproject/index.html#organize-your-folder-structure",
    "href": "blogposts/posts/2023-07-16-you-must-use-rproject/index.html#organize-your-folder-structure",
    "title": "You must use projects with RStudio!",
    "section": "Organize your folder structure",
    "text": "Organize your folder structure\nStructure example\n&gt; Code/\n  &gt; C++/\n  &gt; Julia/\n  &gt; Python/\n  &gt; R/\n    &gt; Test/\n    &gt; Project/\n      &gt; Analysis/\n      &gt; Web_scraping/\n      &gt; ...\n\nThe “Code” folder\nStart with a code project to put all your code (regardless of the programming language) together.\n\n\nLanguage-specific folders\nWithin your “Code” folder, it’s time to create language-specific subfolders, each housing a programming language you use. For our R enthusiasts, let’s dive into the “R” folder. Inside, we’ll unveil the secrets of a well-structured R programming project.\n\n\nTest and project - Yin and Yang\nBehold, the dynamic duo of the R folder—the “Test” and “Project” folders. These siblings play distinct roles in your coding journey, ensuring order and clarity.\nThe “Test” folder is your haven for experimentation and ad-hoc code trials. When you’re not working within a formal Rproject, this folder becomes your working directory. It’s here that you can tinker, test, and push the boundaries of your R code without affecting your main projects. To make life easier, let’s make the “Test” folder your permanent default working directory in RStudio.\nIn RStudio, navigate to Tools -&gt; Global Options -&gt; General Look for the Default working directory and select Browse... next to it. Find and select your “Test” folder. Voila! RStudio will now use the “Test” folder as the default working directory whenever you’re not working within an Rproject.\nOn the other hand, the “Project” folder is where the work truly unfolds. When creating an Rproject in RStudio, it will generate a dedicated project folder with all the necessary files and configurations. You have the freedom to structure this folder as you please, organizing your code, data, documentation, and any additional resources. It’s the ideal place to encapsulate the entirety of your project, ensuring that everything stays organized and coherent.\n\n\nCreate RStudio’s Rproject\nNow, you may be wondering, “How do I create an Rproject in RStudio?”\nIn RStudio, navigate to File -&gt; New Project -&gt; New Directory -&gt; Empty Project Choose the location of your Project folder within the “R” folder, provide a name for your project, and click Create Project Voila! RStudio conjures an Rproject, complete with an “.Rproj” file and a wondrous new world awaits.\nIf you already have an existing folder, it is the same way. Click New Project in RStudio’s File menu. Choose Existing Directory click Create Project. The project will take the folder name.\nWithin your newly minted Rproject, you can work correctly while basking in the organized files, version control, and a consistent working directory. RStudio conveniently sets the working directory to the project’s root folder, saving you from horrible absolute paths."
  },
  {
    "objectID": "blogposts/posts/2023-07-16-you-must-use-rproject/index.html#organize-your-folder-inside-a-rproject",
    "href": "blogposts/posts/2023-07-16-you-must-use-rproject/index.html#organize-your-folder-inside-a-rproject",
    "title": "You must use projects with RStudio!",
    "section": "Organize your folder inside a Rproject",
    "text": "Organize your folder inside a Rproject\nHow to organize folders inside an Rproject? It’s like cleaning your room, but without the actual physical labor. Keep in mind that there are many way to organize it, here are a few examples:\n# Minimal\n&gt; project_name/\n    &gt; Data/\n    &gt; Script/\n    &gt; Result/\n\n# A more complex example\n&gt; project_name/\n    &gt; Codebook/\n    &gt; Data/\n    &gt; Script/\n        &gt; R/\n        &gt; Rcpp/\n    &gt; Plots/\n\n# R package basic structure\n&gt; package_name/\n    &gt; R/\n    &gt; man/\n    &gt; tests/\n    \n\n# My way\n&gt; project_name\n    &gt; Data_raw\n    &gt; Data_clean\n    &gt; Script\n        &gt; Fun\n    &gt; Report\n    &gt; Results\n        &gt; Figures\n        &gt; Tables"
  },
  {
    "objectID": "blogposts/posts/2023-07-16-you-must-use-rproject/index.html#conclusion",
    "href": "blogposts/posts/2023-07-16-you-must-use-rproject/index.html#conclusion",
    "title": "You must use projects with RStudio!",
    "section": "Conclusion",
    "text": "Conclusion\nAs R programming enthusiasts, we’ve ventured through its intricacies with Rproject, an essential tool that safeguards against absolute paths, file mix-ups, and versioning issues. All projects, large or small, merit organization and care. We’ve explored the allure of folder structures and Rproject creation, finding peace in structured coding by managing specific subfolders and enhancing the relationship between “Test” and “Project” folders. RStudio assists us in this journey, simplifying the creation of Rprojects, thus promoting productivity and precision. Fellow coders, let’s advance with our folder structures as elegant as our code!"
  },
  {
    "objectID": "blogposts/posts/Python_Fundamentals/index.html",
    "href": "blogposts/posts/Python_Fundamentals/index.html",
    "title": "Learn Terminal Basics",
    "section": "",
    "text": "By Fabrice Hategekimana\nGoal: To initiate people who would like to start with Python by starting with the basics or the basics or people who want to reinforce their knowledge by going through important concepts in programming.\nPlaylist here\nNote: video in french, ask in comments for subtitle in your language"
  },
  {
    "objectID": "blogposts/posts/Python_Fundamentals/index.html#first-video-of-the-playlist",
    "href": "blogposts/posts/Python_Fundamentals/index.html#first-video-of-the-playlist",
    "title": "Learn Terminal Basics",
    "section": "First video of the playlist:",
    "text": "First video of the playlist:"
  },
  {
    "objectID": "blogposts/posts/Live/index.html",
    "href": "blogposts/posts/Live/index.html",
    "title": "We-Data Live on YouTube",
    "section": "",
    "text": "By David Munoz Tord, Fabrice Hategekimana and Vestin Hategekimana\nLive of December 29 edited in which we present in more detail WeData, its functioning and its future.\nNote: video in french, ask in comments for subtitle in your language\nVideo link"
  },
  {
    "objectID": "blogposts/posts/True_Ignorant/index.html",
    "href": "blogposts/posts/True_Ignorant/index.html",
    "title": "What a tool! - An ignorant perspective",
    "section": "",
    "text": "By Fabrice Hategekimana\nIn this playlist are all the videos presenting useful tools when coding or when you are a student.\nPlaylist here\nNote: video in french, ask in comments for subtitle in your language"
  },
  {
    "objectID": "blogposts/posts/True_Ignorant/index.html#first-video-of-the-playlist",
    "href": "blogposts/posts/True_Ignorant/index.html#first-video-of-the-playlist",
    "title": "What a tool! - An ignorant perspective",
    "section": "First video of the playlist:",
    "text": "First video of the playlist:"
  },
  {
    "objectID": "blogposts/posts/R_basics/index.html",
    "href": "blogposts/posts/R_basics/index.html",
    "title": "Learn R Basics",
    "section": "",
    "text": "By Vestin Hategekimana\nGoal: To initiate people who would like to start with R by starting with the basics or the basics or people who want to reinforce their knowledge by going through important concepts in programming.\nPlaylist here\nNote: video in french, ask in comments for subtitle in your language"
  },
  {
    "objectID": "blogposts/posts/R_basics/index.html#first-viédo-of-the-playlist",
    "href": "blogposts/posts/R_basics/index.html#first-viédo-of-the-playlist",
    "title": "Learn R Basics",
    "section": "First viédo of the playlist:",
    "text": "First viédo of the playlist:"
  },
  {
    "objectID": "blogposts/posts/Code_Hygiene/index.html",
    "href": "blogposts/posts/Code_Hygiene/index.html",
    "title": "Code Hygiene. Don’t Laugh it off !",
    "section": "",
    "text": "By Fabrice Hategekimana\nGoal: Introduce the basics of hygiene in the code to have clean and reusable scripts. Workflow and refactoring are also important elements to achieve good results. We explain everything in our videos!\nPlaylist here\nNote: video in french, ask in comments for subtitle in your language"
  },
  {
    "objectID": "blogposts/posts/Code_Hygiene/index.html#first-viédo-of-the-playlist",
    "href": "blogposts/posts/Code_Hygiene/index.html#first-viédo-of-the-playlist",
    "title": "Code Hygiene. Don’t Laugh it off !",
    "section": "First viédo of the playlist:",
    "text": "First viédo of the playlist:"
  },
  {
    "objectID": "blogposts/posts/Data_explor_Fundamentals/index.html",
    "href": "blogposts/posts/Data_explor_Fundamentals/index.html",
    "title": "Data Exploration with R",
    "section": "",
    "text": "By David Munoz Tord\nGoal: Learn about data exploration and familiarize yourself with some of the basic functions of the tidyverse.\nOpen it full\nNote: All in english"
  },
  {
    "objectID": "blogposts/posts/2023-06-26-let-s-contribute/index.html",
    "href": "blogposts/posts/2023-06-26-let-s-contribute/index.html",
    "title": "How to contribute to our website with blog posts using R and RStudio",
    "section": "",
    "text": "Contribution\n\n\n\nHow to Contribute to Our website with Blog Posts Using R and RStudio\nHello, esteemed statisticians and fellows of WeData!\nI appreciate your dedication and knowledge, and now I offer an opportunity for you to share your wisdom with the world! If you’re comfortable using R and RStudio, I believe that the process will be smooth, faster, and easier. This guide will walk you through the process of contributing to our group via blog posts. Let’s start this journey together!\n\nPrerequisites:\nBefore I delve into the details, there are a couple of things you need:\n\nGitHub Account: If you don’t have one yet, simply visit GitHub and register an account. Once you’ve done that, share your GitHub username with us, and I will add you to our group account. Not familiar with GitHub? No worries! Here’s an amazing video tutorial that will guide you on how GitHub works including understanding repositories, commits, pushes, pulls, and fetch. It will also show you how to use GitHub Desktop if you are allergic to terminals,\n\n\n\nStep-by-step Guide:\nNow, let’s move onto the core part:\n\nStep 1: Clone the Repository\nOn your local machine, clone the repository we-data-ch/blog in the place you want. To do so, open your terminal and type:\ngit clone https://github.com/usour/glave.git\nAgain, if you are allergic to terminals you can clone the repository using GitHub Desktop\nThis will create a copy of our repository on your machine.\n\n\nStep 2: Open the Repository in RStudio\nI recommend you to open the cloned repository in RStudio as a project. In RStudio, go to File &gt; New Project &gt; Existing Directory, and then navigate to the blog folder. This will set up your environment and make the workflow smoother.\n\n\nStep 3: Install the blogdown Package\nIn case you have not installed it yet, use the following command to install the blogdown package:\ninstall.packages(\"blogdown\")\nOnce it is installed, you need to restart R to make sure everything is properly loaded.\n\n\nStep 4: Start a New Article\nNow you’re ready to write your own article! To create a new post, simply run (Note: here there are 3 : so :::):\nblogdown:::new_post_addin()\nThis will open a dialogue where you can fill in details about your post like its title, author name, date, and more. If you don’t know what a field means, just let it blank, you can always change it later in the YAML (header of the file, meaning the first part). You can either chose Rmarkdown or markdown (if you don’t want to add code). You don’t know R/markdown? here is an introduction video. If you don’t want to learn markdown (which is to bad because it is very easy), you can still use a trick (see in the step 5 “Visual” subsection)!\n\n\nStep 5: Edit the Document\nAfter the creation of the post, the corresponding file will open in the source editor. This is where your magic happens! Begin writing your blog post. Remember, our website supports markdown syntax, so you can easily format your text with headings, lists, links, etc.\n\nThe YAML\nAt the top of your document you have the YAML which is the header in which you can manage the meta information about your blog post. It looks like that:\n\n\n\nIn example the one I used for this post\n\n\nLet’s break it down!\nNote: you don’t need to use quotation marks!\n\ntitle: This field is used for the title of the post or webpage. It’s typically displayed at the top of the page and used in the browser’s title bar.\nauthor: This field specifies the author of the post or webpage.\ndate: This specifies the date the post was written or the webpage was last updated. It’s usually displayed somewhere near the top of the page.\nslug: This is used as the tail-end of the URL for the specific post or webpage. For instance, if your slug is “my-awesome-post”, the URL might be “www.yoursite.com/my-awesome-post”.\ncategories: This is a list of categories that the post or webpage belongs to. Categories are a higher-level way to organize posts/webpages, and they can typically contain multiple tags.\ntags: This is a list of tags associated with the post or webpage. Tags are generally more specific than categories and are useful for users searching for a specific topic.\ndescription: This field is used for a brief description or summary of the post or webpage. It’s often used in the webpage’s metadata and can be used by search engines.\nimage: This specifies a path or URL to an image file associated with the post or webpage. This image might be used as a thumbnail or a header image. The easiest way to enter the path of a local image is to move the image into the same folder as the post, so that all you have to enter is the image name (with its extension).\nmath: This field, if set to “yes”, indicates that the post or webpage contains mathematical notations or formulae that need to be rendered properly.\nlicense: This specifies the license under which the content of the post or webpage is shared.\nhidden: If this is set to “yes”, the post or webpage won’t be listed in the index or feed of the site but can still be accessed directly via its URL.\ncomments: If this is set to “yes”, it allows users to comment on the post or webpage.\n\nYou don’t need to fill everything, but you should add the title, the date and the author of the blog post.\n\n\nVisual\nIf you don’t want to use markdown to edit your document, simply use the visual mode in RStudio that allow you to edit markdown and Rmarkdown file as if they were word documents. To do this, click on the “Visual” button at the top left of the code window, as shown in the following image:\n\n\n\nvisual mode\n\n\n\n\n\nStep 6: Preview Your Post\nTo check how your blog post looks like in real-time, use:\nblogdown::serve_site()\nThis will start a local server and open a preview of the entire blog in the viewer pane on RStudio. You can easily access your own post from there. To stop the server, just run:\nblogdown::stop_server()\nblogdown::serve_site() has the advantage of being dynamic in the sense that when it is activated, you can modify your blog post on RStudio and see the changes take place automatically on the screen. You could also use it from the start (before running any code).\nPlease note, however, that the server will not launch if there is an error in your code.\n\n\nStep 7: Commit and Push to the Repository\nOnce you’re satisfied with your article, it is time to share it with the world! First, you need to save your changes. In the RStudio Git pane, stage your changes, then commit with a meaningful message or you can also do the same on GitHub desktop.\nNext, push your changes:\ngit push\nAgain if you are allergic to terminals here is how you can do it with GitHub Desktop\nAnd voilà! You’ve just contributed to our website. Congratulations!\nThis might seem like a lot at first, but once you get the hang of it, the process becomes second nature. I look forward to your valuable contributions. Happy blogging!"
  },
  {
    "objectID": "blogposts/posts/Data_Viz_Fundamentals/index.html",
    "href": "blogposts/posts/Data_Viz_Fundamentals/index.html",
    "title": "Data Viz Fundamentals with R",
    "section": "",
    "text": "By David Munoz Tord\nGoal: Go over the basics of data visualization with R and learn more advanced concepts using the ggplot package.\nNote: All is in english\nOpen it full"
  },
  {
    "objectID": "index.html#viewpoints",
    "href": "index.html#viewpoints",
    "title": "Blog WeData",
    "section": "Viewpoints",
    "text": "Viewpoints"
  },
  {
    "objectID": "index.html#case-studies",
    "href": "index.html#case-studies",
    "title": "Blog WeData",
    "section": "Case Studies",
    "text": "Case Studies"
  },
  {
    "objectID": "index.html#the-opaque-nature-of-ai-technology-poses-serious-challenges-to-legal-systems-which-have-been-built-around-individual-or-human-accountability.-on-a-more-fundamental-level-basic-human-rights-are-threatened-as-legal-accountability-is-blurred-by-the-maze-of-technology-placed-between-perpetrators-and-the-various-forms-of-discrimination-that-can-be-conveniently-blamed-on-the-machine.",
    "href": "index.html#the-opaque-nature-of-ai-technology-poses-serious-challenges-to-legal-systems-which-have-been-built-around-individual-or-human-accountability.-on-a-more-fundamental-level-basic-human-rights-are-threatened-as-legal-accountability-is-blurred-by-the-maze-of-technology-placed-between-perpetrators-and-the-various-forms-of-discrimination-that-can-be-conveniently-blamed-on-the-machine.",
    "title": "Blog WeData",
    "section": "The opaque nature of AI technology poses serious challenges to legal systems which have been built around individual or human accountability. On a more fundamental level, basic human rights are threatened, as legal accountability is blurred by the maze of technology placed between perpetrators and the various forms of discrimination that can be conveniently blamed on the machine.",
    "text": "The opaque nature of AI technology poses serious challenges to legal systems which have been built around individual or human accountability. On a more fundamental level, basic human rights are threatened, as legal accountability is blurred by the maze of technology placed between perpetrators and the various forms of discrimination that can be conveniently blamed on the machine.\nArshin Adib-Moghaddam, author, Is Artificial Intelligence Racist?\n\nRead the full article"
  },
  {
    "objectID": "index.html#data-science-ideas",
    "href": "index.html#data-science-ideas",
    "title": "Blog WeData",
    "section": "Data Science Ideas",
    "text": "Data Science Ideas"
  },
  {
    "objectID": "posts/R_basics/index.html#first-vidéo-of-the-playlist",
    "href": "posts/R_basics/index.html#first-vidéo-of-the-playlist",
    "title": "Learn R Basics",
    "section": "First vidéo of the playlist:",
    "text": "First vidéo of the playlist:"
  },
  {
    "objectID": "posts/Code_Hygiene/index.html#first-vidéo-of-the-playlist",
    "href": "posts/Code_Hygiene/index.html#first-vidéo-of-the-playlist",
    "title": "Code Hygiene. Don’t Laugh it off !",
    "section": "First vidéo of the playlist:",
    "text": "First vidéo of the playlist:"
  },
  {
    "objectID": "posts/Programming_exercise_websites/index.html",
    "href": "posts/Programming_exercise_websites/index.html",
    "title": "Free programming exercice websites",
    "section": "",
    "text": "Below, you will find a table that summarizes the best free exercise websites to learn to code. We have filtered the choices based on the proportion of free content, the programming languages used in our community, and the themes of interest. Here are the programming languages and the themes of interest in our community:\nLanguages: Python, R, Julia, Go(lang), Rust, C/C++, Nim, Haskell, OCaml, JavaScript, HTML/CSS, SQL, Lua\nThemes: Cybersecurity, Dev Ops, Web development, Software development, Data Science, Data Analysis, Data Ops\nFree: Partially (&lt;50%), Mostly (&gt;50%), Completely (100%)\nNote: There is no rank, chose the website that is the best for you.\n\n\n\nWebsite\nFree\n(Programming) Languages\nThemes\n\n\n\n\nCode Academy\nPartially\nPython, R, C, C++, JavaScript, HTML, CSS, SQL, ++\nCybersecurity, Web development, Data Science, Data Analysis\n\n\nCoding Game\nCompletely\nPython, Go(lang), Rust, C, C++, Haskell, OCaml, JavaScript, Lua, ++\n\n\n\nUdacity\nPartially\nPython, R, JavaScript, HTML, CSS, +\nCybersecurity, Dev Ops, Web development, Software development, Data Science, Data Analysis, Data Ops\n\n\nCode Wars\nCompletely\nPython, R, Julia, Go(lang), Rust, C, C++, Nim, Haskell, OCaml, JavaScript, SQL, Lua, +++\n\n\n\nFreeCodeCamp\nCompletely\nPython, JavaScript, HTML, CSS, SQL\nCybersecurity, Web development, Data Science, Data Analysis\n\n\nW3School\nCompletely\nPython, R, Go(lang), C, C++, JavaScript, HTML, CSS, SQL, +\nWeb development\n\n\nCoursera\nMostly\nPython, R, Julia, Go(lang), Rust, C, C++, JavaScript, HTML, CSS, SQL, +++\nCybersecurity, Dev Ops, Web development, Software development, Data Science, Data Analysis, Data Ops\n\n\n\nI personally prefer FreeCodeCamp, W3School and Coursera. Because their content is free and the only thing we need to pay is the certification if we want it. Also, you don’t need a code editor with W3School and Coursera, the exercices are online. The big plus with coursera is the variety of classes available and these are real classes.\nYou can chose one path or many of them, but don’t waste time chosing the best of the best. Start with one that you find good. If at somepoint it doesn’t fit your needs anymore change.\nGood luck on your learning journey!"
  },
  {
    "objectID": "posts/Programming_exercise_websites/index.html#summary-table",
    "href": "posts/Programming_exercise_websites/index.html#summary-table",
    "title": "Free programming exercice websites",
    "section": "",
    "text": "Below, you will find a table that summarizes the best free exercise websites to learn to code. We have filtered the choices based on the proportion of free content, the programming languages used in our community, and the themes of interest. Here are the programming languages and the themes of interest in our community:\nLanguages: Python, R, Julia, Go(lang), Rust, C/C++, Nim, Haskell, OCaml, JavaScript, HTML/CSS, SQL, Lua\nThemes: Cybersecurity, Dev Ops, Web development, Software development, Data Science, Data Analysis, Data Ops\nFree: Partially (&lt;50%), Mostly (&gt;50%), Completely (100%)\nNote: There is no rank, chose the website that is the best for you.\n\n\n\nWebsite\nFree\n(Programming) Languages\nThemes\n\n\n\n\nCode Academy\nPartially\nPython, R, C, C++, JavaScript, HTML, CSS, SQL, ++\nCybersecurity, Web development, Data Science, Data Analysis\n\n\nCoding Game\nCompletely\nPython, Go(lang), Rust, C, C++, Haskell, OCaml, JavaScript, Lua, ++\n\n\n\nUdacity\nPartially\nPython, R, JavaScript, HTML, CSS, +\nCybersecurity, Dev Ops, Web development, Software development, Data Science, Data Analysis, Data Ops\n\n\nCode Wars\nCompletely\nPython, R, Julia, Go(lang), Rust, C, C++, Nim, Haskell, OCaml, JavaScript, SQL, Lua, +++\n\n\n\nFreeCodeCamp\nCompletely\nPython, JavaScript, HTML, CSS, SQL\nCybersecurity, Web development, Data Science, Data Analysis\n\n\nW3School\nCompletely\nPython, R, Go(lang), C, C++, JavaScript, HTML, CSS, SQL, +\nWeb development\n\n\nCoursera\nMostly\nPython, R, Julia, Go(lang), Rust, C, C++, JavaScript, HTML, CSS, SQL, +++\nCybersecurity, Dev Ops, Web development, Software development, Data Science, Data Analysis, Data Ops\n\n\n\nI personally prefer FreeCodeCamp, W3School and Coursera. Because their content is free and the only thing we need to pay is the certification if we want it. Also, you don’t need a code editor with W3School and Coursera, the exercices are online. The big plus with coursera is the variety of classes available and these are real classes.\nYou can chose one path or many of them, but don’t waste time chosing the best of the best. Start with one that you find good. If at somepoint it doesn’t fit your needs anymore change.\nGood luck on your learning journey!"
  },
  {
    "objectID": "posts/2023_posit_conference/index.html",
    "href": "posts/2023_posit_conference/index.html",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "I’ve been eagerly anticipating the public release of the videos from the recent Posit conference about one of my favorite programming languages: R. For someone who has gained so much from previous editions of this conference, the wait was filled with a mix of anticipation and excitement. Knowing the discussions and advancements shared in these conferences has always been a key way for me to stay up-to-date and catch up with the latest in R programming. And now, with 108 videos available, it’s like a treasure trove of knowledge just waiting to be explored!\nThe highlight for me this year was twofold. First, I was looking forward to learning about the developments and new features of two innovative tools, Quarto and WebR. These tools represent significant advancements in our field, and I couldn’t wait to see what they had to offer. Even though I was fairly up to date on the subject, seeing these tools in action is still very interesting. Second, the talks about packages always catch my interest. They’re crucial for understanding the practical applications and integrations of R and how the community grow.\nWhile the applications of R in production and academia are undeniably relevant, they aren’t the core focus of this blog post. Instead, what always amazes me is the depth and variety of topics covered, which seems to expand with every passing year. This year was no exception, and I found myself pleasantly surprised by some of the content.\nIn this blog post, I want to share my favorite talks from the conference and dive into why they resonated with me. I hope that by sharing these insights, I can spark the same excitement and passion for programming and data science in you, my readers.\n\n\n\nSpeeding up Big Data Manipulation: We’ll delve into a package, {duckplyr}, that is revolutionizing the way we handle large datasets. Expect to see some groundbreaking methods that are making data manipulation fast.\nInline Variables: A deep dive into how inline variables are changing the game in coding and how the {epox} package is boosting it.\nUI for UI: An intriguing concept that’s reshaping our approach to user interface design. We will see how {ShinyUiEditor} can make you life easier for building Shiny apps.\nQuarto talks: A dedicated section where we’ll unpack the latest features and advancements in Quarto. If you’re as excited about this tool as I am, you’re in for a treat!\nWebR talks: Similarly, we’ll dive into what’s new with WebR. The developments here are nothing short of revolutionary.\nOther Interesting Talks: And of course, there were many more gems in the conference. I’ll highlight some talks that, while they might not have been in the limelight, offered incredible discoveries.\n\nAs we embark on this journey through the highlights of the conference, I invite you to share my enthusiasm and optimism for the future of data science. The world of programming is continually evolving, and it’s an exciting time to be part of this field. Let’s dive in and discover the wonders of programming together!\n\n\n\n\nThis year’s conference brought a notable change: the host company’s shift from “RSudio” to “Posit”. This isn’t just a name change; it symbolizes a commitment to embracing a wider range of programming languages, extending beyond the familiar R to include Python and more. This move reflects an understanding that the data science world is diverse and ever-evolving.\nInitially, some R enthusiasts were concerned that Posit might pivot away from R in favor of the trendier Python language. However, these fears were assuaged as the conference unfolded, showcasing a balanced focus on both R and Python (next on the list: Julia?).\nDespite the initial apprehension, this year’s conference mirrored the richness and depth of its predecessors. The variety of talks confirmed Posit’s dedication to supporting a spectrum of programming languages and topics.\n\n\n\n\nAt this year’s conference, Kirill Müller unveiled something pretty cool for us data scientist: “duckplyr.” It is a new tool, aiming to handle big data. Think of it as a turbocharged bridge between DuckDB and dplyr, but with the familiar dplyr vibe.\n\n\n\nI have been on this data journey for a while, hopping from data.table to dtplyr, to dbplyr, to dbcooper, to arrow and duckdb and now I am aiming at “duckplyr.” Kirill Müller’s talk showed how it can make our dplyr code go through data in DuckDB – faster and smoother, especially with those tricky queries. And guess what? There’s more to come, like handling complex data types better.\nI’m always looking for something that can make my data work feel less like a chore and more like a breeze. “Duckplyr” might just be the next thing in my toolbox. It’s exciting to see tools evolving to keep up with our big data challenges.\nIn short, “duckplyr” is shaping up to be a game-changer for big data manipulation. Can’t wait to see where this goes!\n\n\n\n\n\nGarrick Aden-Buie’s introduction of ‘epoxy’ at the latest conference was a standout moment for data presentation. ‘Epoxy’ brings a fresh perspective to presenting data in Quarto and RMarkdown, making it easy to integrate formatted data into text (markdown).\n\n\n\nThis tool transforms how we embed data, such as currencies or percentages, directly into our reports, enhancing readability and comprehension. Beyond its practical applications, ‘epoxy’ intrigued me. Could its custom code chunks be a result of Lua scripting? This adds an exciting dimension to its functionality.\n‘Epoxy’ is all about clarity and engagement in data reporting. It’s a game-changer for making reports not only informative but also visually appealing.\n\n\n\n\n\nNick Strayer’s introduction of ShinyUIEditor at the recent Posit conference was a standout moment for anyone interested in Shiny app development. Before encountering this tool, I leaned towards Nim and Python for app creation. But ShinyUIEditor has reignited my enthusiasm for Shiny apps (WebR and Shinylive contributed to it too).\n\n\n\nShinyUIEditor goes beyond basic app design. It’s a real-world solution for creating interactive Shiny dashboards with ease. Nick highlighted how the editor simplifies the UI setup. What’s impressive about ShinyUIEditor is its drag-and-drop functionality. It makes adding and configuring UI elements a breeze. Nick’s demonstration of building a Shiny app from the ground up showcased this simplicity and efficiency. The ShinyUIEditor isn’t just about layout; it also integrates interactivity by connecting inputs and outputs. The ability to add Markdown text for explanations further enhances its utility.\nShinyUIEditor has finally entered its Beta phase! Nick also hinted at future developments for the ShinyUIEditor, promising an even more robust tool for Shiny developers.\nThe ShinyUIEditor has transformed my view of Shiny app development. It’s making app creation more accessible, efficient, and enjoyable. I’m excited to delve back into Shiny apps, thanks to this innovative tool.\n\n\n\n\n\nAs a fervent advocate of Quarto and its core features, binge-watching the conference videos was like a treasure hunt for me. Three talks, in particular, caught my eye, each unveiling features of Quarto that not only impressed but also sparked my curiosity and enthusiasm.\n\n(1) Extending Quarto(2) Parameterized Quarto(3) Reproducible manuscript with Quarto\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRichard’s talk was a deep dive into the world of Quarto extensions. He showcased a variety of them, including eye-catching short code extensions for icons like Font Awesome and Lordicon. His demonstration of “qformat” for number formatting in Quarto documents was particularly intriguing. The emphasis on good documentation and the mention of the “Awesome Quarto” GitHub repository as a comprehensive resource was a valuable takeaway for anyone looking to expand their Quarto capabilities.\n\n\n\nJadey’s transition from an environmental technician to a data scientist and her journey with parameterized reporting was nothing short of inspiring. She highlighted how parameterized reporting transforms static reports into dynamic documents with placeholders for data, making them more adaptable and relevant. Her focus on designing for accessibility and her practical tips on report styling were especially enlightening. This talk opened my eyes to the possibilities of parameterizing Quarto documents, an approach I’m eager to implement.\n\n\n\nMine’s presentation on creating reproducible scientific manuscripts using Quarto was a game changer. She shed light on how Quarto projects can manage complexity in scientific projects and integrate various tools and languages. The introduction of the manuscript project type in Quarto, enabling the creation of manuscripts in multiple formats with embedded computations, was a highlight. This feature elevates Quarto from a tool for authoring academic work to a platform for truly transparent and reproducible research. Now there’s no excuse: it’s very easy to share all your code and collaborate with colleagues using different methods.\n\n\n\nEach of these talks showcased different aspects of Quarto’s versatility and power. From enhancing the visual appeal with extensions to the practicality of parameterized reporting and the groundbreaking approach to reproducible manuscripts, Quarto is proving to be an indispensable tool in data science. As someone who initially leaned towards other programming languages for app creation, these Quarto features have rekindled my interest and excitement in working with Shiny apps and Quarto documents (And that’s not all - wait until you see the next part!).\n\n\n\n\n\nWebR is making waves in the R community, offering powerful capabilities for teaching and app creation, despite being in its nascent stage (version 0.2.3). Its impact on Shiny app development, particularly through serverless applications via Shinylive, has rekindled my interest in the platform.\n\n(1) Magic with WebAssembly(2) R-Shiny without server\n\n\n\n\n\n\n\n\n\n\n\nGeorge Stagg provided a succinct overview of WebR, emphasizing its ability to run R code directly in web browsers without a supporting server. He discussed how Web Assembly enables WebR to operate across various platforms and showcased its application in educational tools and documentation. George also demonstrated WebR’s unique features, such as manipulating data and running R functions, and highlighted its promising performance and security.\n\n\n\nJoe Cheng’s presentation focused on the integration of WebAssembly with Shiny, specifically through Shinylive. He discussed the evolution of serverless Shiny apps and their potential in interactive web-based applications. Despite some limitations like slower start times, Joe’s talk suggested a bright future for Shinylive in enhancing Shiny’s capabilities.\n\n\n\nThese presentations have heightened my excitement for WebR’s future. I’ve explored every feature that WebR offers, from engaging with interactive code chunks in Quarto and crafting Shiny apps using Shinylive, to integrating R within JavaScript via the webr npm library. The next venture on my journey with WebR is to delve into the creation of standalone Electron apps, harnessing its vast capabilities. Will it works?\n\n\n\n\n\nAmid a conference rich in sessions about Quarto, WebR, and LLM, one presentation stood out for its innovative approach to data visualization. Deepsha Menghani’s session brilliantly demonstrated how to bring data to life through interactivity and animation. I highly recommand this talk!\n\n\n\nDeepsha Menghani used the character Roy Kent from “Ted Lasso” as a focal point to explore advanced data visualization techniques. She skillfully employed animation to depict Roy Kent’s frequent use of a certain expletive, adding a layer of time to the story with the Plotly package. Further enhancing the interactive experience, she introduced the concept of Roy Kent’s ‘f-score’ and implemented a checkbox filter, allowing viewers to tailor the data exploration to their preferences. Additionally, Deepsha showcased the power of linking different plots to provide a comprehensive view of how specific episodes impact broader trends.\nShe also stressed the importance of a balanced approach in visualization. While emphasizing that tools like animations and interactivity are powerful, she cautioned against their overuse, which can lead to cluttered and confusing visuals. Her presentation was not just about static data; it extended into dynamic, interactive realms, mentioning the use of Crosstalk and the integration of these techniques into Shiny apps.\n\n\n\nThis presentation stood out as a gem in the conference, highlighting the evolving art of data visualization. I’m determined to use the tools and concepts presented in this video to create better visualizations, dashboards and interactive applications. Truly brilliant!\n\n\n\n\n\nAs this blog post comes to a close, I am once again reminded of the invaluable learning experiences these conferences provide. From the groundbreaking advancements in WebR and its impact on R programming to the imaginative ways of visualizing data presented by Deepsha Menghani, every session was a testament to the continuous evolution and excitement in our field.\nI am particularly thrilled by the innovations in Quarto and the new frontiers opened by WebR, which are not just enhancing our skills but also expanding the ways we think about and interact with data. The discussions and exchanges with the community are, as always, the lifeblood of these conferences, keeping us connected and in tune with the latest trends and developments.\nLooking forward to the next conference, I’m filled with optimism and eagerness to see what new breakthroughs and discussions it will bring. These events are not just about learning; they’re a celebration of our vibrant community and the continuous journey of discovery in the world of data and programming.\nLet’s see what the future holds!"
  },
  {
    "objectID": "posts/2023_posit_conference/index.html#exciting-topics-well-explore-together",
    "href": "posts/2023_posit_conference/index.html#exciting-topics-well-explore-together",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "Speeding up Big Data Manipulation: We’ll delve into a package, {duckplyr}, that is revolutionizing the way we handle large datasets. Expect to see some groundbreaking methods that are making data manipulation fast.\nInline Variables: A deep dive into how inline variables are changing the game in coding and how the {epox} package is boosting it.\nUI for UI: An intriguing concept that’s reshaping our approach to user interface design. We will see how {ShinyUiEditor} can make you life easier for building Shiny apps.\nQuarto talks: A dedicated section where we’ll unpack the latest features and advancements in Quarto. If you’re as excited about this tool as I am, you’re in for a treat!\nWebR talks: Similarly, we’ll dive into what’s new with WebR. The developments here are nothing short of revolutionary.\nOther Interesting Talks: And of course, there were many more gems in the conference. I’ll highlight some talks that, while they might not have been in the limelight, offered incredible discoveries.\n\nAs we embark on this journey through the highlights of the conference, I invite you to share my enthusiasm and optimism for the future of data science. The world of programming is continually evolving, and it’s an exciting time to be part of this field. Let’s dive in and discover the wonders of programming together!"
  },
  {
    "objectID": "posts/2023_posit_conference/index.html#whats-new-this-year-embracing-a-broader-programming-horizon",
    "href": "posts/2023_posit_conference/index.html#whats-new-this-year-embracing-a-broader-programming-horizon",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "This year’s conference brought a notable change: the host company’s shift from “RSudio” to “Posit”. This isn’t just a name change; it symbolizes a commitment to embracing a wider range of programming languages, extending beyond the familiar R to include Python and more. This move reflects an understanding that the data science world is diverse and ever-evolving.\nInitially, some R enthusiasts were concerned that Posit might pivot away from R in favor of the trendier Python language. However, these fears were assuaged as the conference unfolded, showcasing a balanced focus on both R and Python (next on the list: Julia?).\nDespite the initial apprehension, this year’s conference mirrored the richness and depth of its predecessors. The variety of talks confirmed Posit’s dedication to supporting a spectrum of programming languages and topics."
  },
  {
    "objectID": "posts/2023_posit_conference/index.html#speeding-up-big-data-manipulation",
    "href": "posts/2023_posit_conference/index.html#speeding-up-big-data-manipulation",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "At this year’s conference, Kirill Müller unveiled something pretty cool for us data scientist: “duckplyr.” It is a new tool, aiming to handle big data. Think of it as a turbocharged bridge between DuckDB and dplyr, but with the familiar dplyr vibe.\n\n\n\nI have been on this data journey for a while, hopping from data.table to dtplyr, to dbplyr, to dbcooper, to arrow and duckdb and now I am aiming at “duckplyr.” Kirill Müller’s talk showed how it can make our dplyr code go through data in DuckDB – faster and smoother, especially with those tricky queries. And guess what? There’s more to come, like handling complex data types better.\nI’m always looking for something that can make my data work feel less like a chore and more like a breeze. “Duckplyr” might just be the next thing in my toolbox. It’s exciting to see tools evolving to keep up with our big data challenges.\nIn short, “duckplyr” is shaping up to be a game-changer for big data manipulation. Can’t wait to see where this goes!"
  },
  {
    "objectID": "posts/2023_posit_conference/index.html#inline-variable",
    "href": "posts/2023_posit_conference/index.html#inline-variable",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "Garrick Aden-Buie’s introduction of ‘epoxy’ at the latest conference was a standout moment for data presentation. ‘Epoxy’ brings a fresh perspective to presenting data in Quarto and RMarkdown, making it easy to integrate formatted data into text (markdown).\n\n\n\nThis tool transforms how we embed data, such as currencies or percentages, directly into our reports, enhancing readability and comprehension. Beyond its practical applications, ‘epoxy’ intrigued me. Could its custom code chunks be a result of Lua scripting? This adds an exciting dimension to its functionality.\n‘Epoxy’ is all about clarity and engagement in data reporting. It’s a game-changer for making reports not only informative but also visually appealing."
  },
  {
    "objectID": "posts/2023_posit_conference/index.html#ui-for-ui",
    "href": "posts/2023_posit_conference/index.html#ui-for-ui",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "Nick Strayer’s introduction of ShinyUIEditor at the recent Posit conference was a standout moment for anyone interested in Shiny app development. Before encountering this tool, I leaned towards Nim and Python for app creation. But ShinyUIEditor has reignited my enthusiasm for Shiny apps (WebR and Shinylive contributed to it too).\n\n\n\nShinyUIEditor goes beyond basic app design. It’s a real-world solution for creating interactive Shiny dashboards with ease. Nick highlighted how the editor simplifies the UI setup. What’s impressive about ShinyUIEditor is its drag-and-drop functionality. It makes adding and configuring UI elements a breeze. Nick’s demonstration of building a Shiny app from the ground up showcased this simplicity and efficiency. The ShinyUIEditor isn’t just about layout; it also integrates interactivity by connecting inputs and outputs. The ability to add Markdown text for explanations further enhances its utility.\nShinyUIEditor has finally entered its Beta phase! Nick also hinted at future developments for the ShinyUIEditor, promising an even more robust tool for Shiny developers.\nThe ShinyUIEditor has transformed my view of Shiny app development. It’s making app creation more accessible, efficient, and enjoyable. I’m excited to delve back into Shiny apps, thanks to this innovative tool."
  },
  {
    "objectID": "posts/2023_posit_conference/index.html#quarto-talks-exploring-new-frontiers-in-data-presentation",
    "href": "posts/2023_posit_conference/index.html#quarto-talks-exploring-new-frontiers-in-data-presentation",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "As a fervent advocate of Quarto and its core features, binge-watching the conference videos was like a treasure hunt for me. Three talks, in particular, caught my eye, each unveiling features of Quarto that not only impressed but also sparked my curiosity and enthusiasm.\n\n(1) Extending Quarto(2) Parameterized Quarto(3) Reproducible manuscript with Quarto\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRichard’s talk was a deep dive into the world of Quarto extensions. He showcased a variety of them, including eye-catching short code extensions for icons like Font Awesome and Lordicon. His demonstration of “qformat” for number formatting in Quarto documents was particularly intriguing. The emphasis on good documentation and the mention of the “Awesome Quarto” GitHub repository as a comprehensive resource was a valuable takeaway for anyone looking to expand their Quarto capabilities.\n\n\n\nJadey’s transition from an environmental technician to a data scientist and her journey with parameterized reporting was nothing short of inspiring. She highlighted how parameterized reporting transforms static reports into dynamic documents with placeholders for data, making them more adaptable and relevant. Her focus on designing for accessibility and her practical tips on report styling were especially enlightening. This talk opened my eyes to the possibilities of parameterizing Quarto documents, an approach I’m eager to implement.\n\n\n\nMine’s presentation on creating reproducible scientific manuscripts using Quarto was a game changer. She shed light on how Quarto projects can manage complexity in scientific projects and integrate various tools and languages. The introduction of the manuscript project type in Quarto, enabling the creation of manuscripts in multiple formats with embedded computations, was a highlight. This feature elevates Quarto from a tool for authoring academic work to a platform for truly transparent and reproducible research. Now there’s no excuse: it’s very easy to share all your code and collaborate with colleagues using different methods.\n\n\n\nEach of these talks showcased different aspects of Quarto’s versatility and power. From enhancing the visual appeal with extensions to the practicality of parameterized reporting and the groundbreaking approach to reproducible manuscripts, Quarto is proving to be an indispensable tool in data science. As someone who initially leaned towards other programming languages for app creation, these Quarto features have rekindled my interest and excitement in working with Shiny apps and Quarto documents (And that’s not all - wait until you see the next part!)."
  },
  {
    "objectID": "posts/2023_posit_conference/index.html#webr-talks",
    "href": "posts/2023_posit_conference/index.html#webr-talks",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "WebR is making waves in the R community, offering powerful capabilities for teaching and app creation, despite being in its nascent stage (version 0.2.3). Its impact on Shiny app development, particularly through serverless applications via Shinylive, has rekindled my interest in the platform.\n\n(1) Magic with WebAssembly(2) R-Shiny without server\n\n\n\n\n\n\n\n\n\n\n\nGeorge Stagg provided a succinct overview of WebR, emphasizing its ability to run R code directly in web browsers without a supporting server. He discussed how Web Assembly enables WebR to operate across various platforms and showcased its application in educational tools and documentation. George also demonstrated WebR’s unique features, such as manipulating data and running R functions, and highlighted its promising performance and security.\n\n\n\nJoe Cheng’s presentation focused on the integration of WebAssembly with Shiny, specifically through Shinylive. He discussed the evolution of serverless Shiny apps and their potential in interactive web-based applications. Despite some limitations like slower start times, Joe’s talk suggested a bright future for Shinylive in enhancing Shiny’s capabilities.\n\n\n\nThese presentations have heightened my excitement for WebR’s future. I’ve explored every feature that WebR offers, from engaging with interactive code chunks in Quarto and crafting Shiny apps using Shinylive, to integrating R within JavaScript via the webr npm library. The next venture on my journey with WebR is to delve into the creation of standalone Electron apps, harnessing its vast capabilities. Will it works?"
  },
  {
    "objectID": "posts/2023_posit_conference/index.html#other-interesting-talks",
    "href": "posts/2023_posit_conference/index.html#other-interesting-talks",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "Amid a conference rich in sessions about Quarto, WebR, and LLM, one presentation stood out for its innovative approach to data visualization. Deepsha Menghani’s session brilliantly demonstrated how to bring data to life through interactivity and animation. I highly recommand this talk!\n\n\n\nDeepsha Menghani used the character Roy Kent from “Ted Lasso” as a focal point to explore advanced data visualization techniques. She skillfully employed animation to depict Roy Kent’s frequent use of a certain expletive, adding a layer of time to the story with the Plotly package. Further enhancing the interactive experience, she introduced the concept of Roy Kent’s ‘f-score’ and implemented a checkbox filter, allowing viewers to tailor the data exploration to their preferences. Additionally, Deepsha showcased the power of linking different plots to provide a comprehensive view of how specific episodes impact broader trends.\nShe also stressed the importance of a balanced approach in visualization. While emphasizing that tools like animations and interactivity are powerful, she cautioned against their overuse, which can lead to cluttered and confusing visuals. Her presentation was not just about static data; it extended into dynamic, interactive realms, mentioning the use of Crosstalk and the integration of these techniques into Shiny apps.\n\n\n\nThis presentation stood out as a gem in the conference, highlighting the evolving art of data visualization. I’m determined to use the tools and concepts presented in this video to create better visualizations, dashboards and interactive applications. Truly brilliant!"
  },
  {
    "objectID": "posts/2023_posit_conference/index.html#wrapping-up-a-conference-full-of-learning",
    "href": "posts/2023_posit_conference/index.html#wrapping-up-a-conference-full-of-learning",
    "title": "Exciting Insights from the 2023 Posit conference",
    "section": "",
    "text": "As this blog post comes to a close, I am once again reminded of the invaluable learning experiences these conferences provide. From the groundbreaking advancements in WebR and its impact on R programming to the imaginative ways of visualizing data presented by Deepsha Menghani, every session was a testament to the continuous evolution and excitement in our field.\nI am particularly thrilled by the innovations in Quarto and the new frontiers opened by WebR, which are not just enhancing our skills but also expanding the ways we think about and interact with data. The discussions and exchanges with the community are, as always, the lifeblood of these conferences, keeping us connected and in tune with the latest trends and developments.\nLooking forward to the next conference, I’m filled with optimism and eagerness to see what new breakthroughs and discussions it will bring. These events are not just about learning; they’re a celebration of our vibrant community and the continuous journey of discovery in the world of data and programming.\nLet’s see what the future holds!"
  },
  {
    "objectID": "posts/Two_minutes_rule/index.html",
    "href": "posts/Two_minutes_rule/index.html",
    "title": "The two-minute rule for busy coders/learners",
    "section": "",
    "text": "For busy readers\n\n\n\n\nWe generally have time on our hands, but what makes us feel short of time is the prioritization of our activities.\nStarting to code is difficult, so the activity will be low on our priority list.\nTo make it easier to get started, you need to start with 2-5 minute sessions every week and gradually increase the importance of the activity.\nTo find out how to put this into practice and discover other tips, read the blog post.\n\n\n\nHey, aspiring coders! Let’s dive deeper into making coding a seamless part of your busy life. If you’re struggling to find time, the two-minute rule is your new best friend. It’s all about setting yourself up for success with quick, easy-to-start tasks. Let’s expand on this and give you some real actionable steps!\n\n\n\n\n\n\nNote\n\n\n\nAs you read this article, please take note so that you do not need to come back too often. And be sure to apply everything right away!😁\n\n\n\n\nThe Two-Minute Rule is pretty straightforward: If a habit is hard to get into because of a lack of time, try to start slowly with short 2-minute sessions. This principle, a fusion of the Atomic habits philosophy and the Kaizen method, is perfect for building a coding habit. It’s about overcoming the inertia of starting by making the first step super easy. It is a practice that emphasizes continuous improvement through small, incremental changes in habits while getting rid of bad habits (which is not the focus today).\nIn concrete terms, you start by forging a habit by being regular for a small period of time, in our case 2 minutes every week. Then, when the habit is acquired, you can start to increase the duration and frequency according to what suits you best. You can start with 5 or 10 minutes if that’s not too much of a challenge.But don’t be greedy and hasty at first!\nIndeed we are looking for long term results. Of course, nothing restrain you to have non-regular coding period outside of your new habit, but keep the regularity with this specific habit!\nHow to apply that in your coding habit? Follow this steps:\n\nSet clear objectives: Making a roadmap is event better! There are lots of different things to learn in coding. Not everything is necessary, and that’s why it’s important to set concrete, practical objectives. For example:\n\nFor Python it might be “Know how to create a complete machine learning workflow” rather than “Know how to do machine learning”.\nFor R it might be “Apply a Bayesian multilevel model in a research project on wage inequality” rather than “Know how to use Bayesian statistics”.\n\nDivide this/these objective(s) in multiple smaller steps: To avoid being overwhelmed by a huge goal, you need to break it down into smaller, chronological and measurable objectives. If you’re having trouble doing this, there are plenty of roadmap infographics on the Internet, and in the worst case, ask Chat-GPT or another model to do it for you. Going back to the previous examples:\n\nFor Python it could be:\n\n“Import data”\n“Clean data”\n…\n“Apply random forest model”\n“Compare performance of different models”\n“Make predictions”\n“Export model”…\n\nFor R it could be:\n\n“Select appropriate data”\n“Collect data”\n…\n“Perform descriptive analysis”\n“Specify appropriate priors”\n“Optimize the model”\n“Create regression tables”…\n\n\nSet a precise time: To anchor a good habit, it’s important to rely on regularity rather than effort. Start by setting a simple rhythm (in this case, 2 minutes) and, above all, a precise context. For example: “Every Friday at 6 p.m. on my table in my room, I’m going to learn to code, for 2 minutes”. You can increase the length and frequency of these sessions as you get used to them. There’s no point in starting intensively - it’s the regularity that counts.\nIdentify obstacles and set up a coding zone: See the next section for more details!\n\n\n\n\nThink about what stops you from coding. Here are some classical examples:\n\nDistraction in your PC/smartphone?\nIs it setting up your environment?\nFinding the right resources?\nLack of roadmap or precise steps?\nStarting take too much time (more than 2 minutes)?\nForgetting everything each time?\nNon regularity?\n\nWrite these down and tackle them!\nThe best way to resolve most of the problems is to create an environment that invites you to code and get started fast. Here’s how:\n\nEliminate distractions: Turn off non-essential notifications and put your smartphone aside. You have little time to focus on your work, don’t waste it!\nDedicated space: Even if it’s just a corner of your desk, make it your “coding zone.”\n\nProjects: On your computer, use projects which are dedicated environement (generally a folder) in which you find all the scripts and tools you need to start coding. For instance, Rstudio and VS code have their dedicated way to organise project.\nKeep things tidy: Spend time organizing your projects and your code in a clean way. Every minute you spend getting your project clean will be hours of work you’ll save yourself in the future. What’s more, your project will become a great example for your future works, and therefore a golden resource!\n\nKeep your tools handy: Have your laptop, charger, and any books or resources you need within reach.\n\nBookmark resources: Keep tabs open with coding websites or tutorials you’re following to check anything you need. Ai tools are also ressources, but limit their use (you risk becoming dependent and learning nothing).\nTake notes as you learn: The best ressources are the one you make. Keep a file open (Markdown, Word document, etc.) to note everything useful to help you remember tips/tricks and to write down steps to get started fast (you rarely can remember everything the first time).\nLook for productivity tools: Many code editor like RStudio or VS Code have powerfull extensions. I highly recommand TODO extensions on both RStudio and VS Code, since they let you start right away with specific tasks on your code and help you navigate them.\n\nLook for accountability: It’s no easy task to forge a new habit and stick to it. Often it’s events beyond our control that prevent us from sticking to them. That’s why it’s important to think ahead, to make it difficult to get out of these habits and easy to get in. The most important thing is not to blame ourselves, but to get back into the swing of things as soon as possible:\n\nPlan B: Not only do you need to choose a good time that won’t be disrupted, but you also need to anticipate how you can make up for any unforeseen circumstances. You need to plan ahead for a Plan B, which is another time when the session can be rescheduled. It’s not enough to “make up the time” at the next session; what counts is regularity, not time spent.\nPlan C: There are extreme cases where it’s literally impossible to continue the activity as desired. In such cases, coding is no longer possible (prolonged absence, lost computer, broken hand, etc.). If possible, you need to plan ahead for a viable alternative to keep up the pace. This doesn’t necessarily mean coding. The following section gives a list of things you can do.\nWorking with colleagues: The best way to stay accountable without putting too much blame or pressure on yourself is to join a work group that has set itself a goal of regularity (it doesn’t have to be the same subject). For example, you can organize regular face-to-face or online meetings. During these meetings, everyone works on their personal project. Or you can simply share your progress without the need for meetings. Whatever suits you!\n\n\nAll of the above may seem like big challenges, especially if you’re not familiar with them. But don’t worry, you don’t have to apply them all at once. I’ve arranged them in order of importance. Concentrate on one element at a time until it becomes natural for you. Then you can concentrate on the next element. Since eliminating distractions and finding a dedicated place to work are required, you can start with setting up your project, then move on to keeping your work area clean, then move on to making resources available, and so on. See? A piece of cake!\n\n\n\nOk, we have everyting to start. So what now? What can you possibly do in two, five our ten minutes? Also what about the extrem cases when we can’t possibly code? Let’s break down some coding activities:\n\nNote: activities that can be done whith a smartphone are marked with a (📱) and activities tha can be done without coding are marked with a (✅). Also, when no technology is needed it is marked with a (✏️).\n\n\nTwo- or five-minute tasks:\n\nDo an online coding exercise (here is a list of good platforms) 📱\nRead a tutorial/documentation/book and take note 📱✅✏️\nDrill a simple script to memorize it\nSet up a working directory in the computer✅\nOrganise a project in smaller steps✅\nWrite a comment/TODO in the code explaining your next steps.\nRead a code snippet and type it out.\nBookmark a tutorial for your next session. 📱✅\nSet new goals✅✏️\n\nTen- or five-minute tasks:\n\nAll the previous tasks\nStart a new project (divided in multiple sessions)\nTry a new library/package\nDebug code or find solutions on internet\nFollow a short YouTube tutorial (it is better to code in the same time) 📱✅\nOrganise/clean the project ✅\n\nThirty-Minute or more tasks:\n\nAll the previous tasks\nBuild a small project\nWork through longer tutorials (you should definitely code along)\nLearn new coding tricks 📱\nLearn other coding tools (GitHub for instance)\nLearn new languages (latex, regex, html, etc.)\n\nWhen coding is impossible:\n\nOrganize your roadmap 📱✅✏️\nDiscuss about programming 📱✅✏️\nCompile new resources 📱✅✏️\n\n\n\n\n\nWe’ve finished the main part of the tutorial, so you can stop here. If you’re still not sure how to get started, in the next section we present a concrete example.\n\n\n\n\n\n\nImportant\n\n\n\nBefore you move on, choose a two-minute task from this list and do it. Right now (or plan it for later). It’s all about building momentum!\n\n\n\n\n\nNow we have everything we need to start these new habits. Let’s take the example of Sandiya, a geographer who wants to learn how to use R for a future article. The problem is that she knows nothing about R. So she decides to use the two-minute principle.\n\n\nOnce upon a time in the bustling city, there was a geographer named Sandiya. Passionate about urbanism, she had a dream: to create a detailed map of urban car density using geodata from parking places. But there was a catch – she didn’t know R, the programming language perfect for this task.\nStep 1: Defining the goal\nSandiya’s project was clear: analyze car density variability in various parking places over time. But to do this, she needed to learn R, master data analysis, understand web scraping, and get a grip on geospatial analysis.\nStep 2: Crafting a roadmap\nAfter fruitful discussions and online research, Sandiya outlined her learning path:\n\nBasics of R\nData Analysis Skills\nWeb Scraping Knowledge\nGeospatial Analysis with R\n\nWith her roadmap in hand, she decided to start small, applying the Two-Minute Rule.\nStep 3: Setting the habit\nEvery Tuesday at 4 pm, Sandiya’s living room transformed into her learning zone. She started with just two minutes of R practice and gradually increased her time.\nStep 4: The initial strides\nIn her first session, Sandiya installed R and RStudio, a small but crucial step. The following week, she began online exercises on W3Schools, steadily progressing through them. It was a wise choice, since the website is completly free, doesn’t require an account and has tutorials on R.\nStep 5: Expanding the learning schedule\nTwo months in, Sandiya was already diving into “R for Data Science” (a free online book to learn R). She added Thursdays at 4 pm to her schedule, now feeling more confident and eager to learn. She was already working 30 minutes per session.\nStep 6: Gaining confidence\nAfter another two months, she had honed her data analysis skills. Tackling a data analysis tutorial, she replicated the examples, cementing her understanding.\nStep 7: Diving into web scraping\nSandiya then turned to YouTube videos and blog posts to learn web scraping. She meticulously took notes, starting to collect her needed data. She needed more time, so she decided to work at least one hour per session.\nStep 8: Embracing geospatial analysis\nSimultaneously, she delved into a Bookdown on geospatial analysis in R, replicating examples and building her skills.\nStep 9: Six months of transformation\nSix months from her humble two-minute beginnings, Sandiya was working six hours weekly on R (three hours each on Tuesday and Thursday) and had reached an advanced level. She was able to submit her paper for publication.\nStep 10: Flexibility and persistence\nNot every week was perfect. Sometimes, life intervened, and Sandiya rescheduled her Tuesday sessions to Saturday mornings. But she persisted.\nStep 11: Eyeing a new challenge\nNow, comfortably adept at R and with a regular habit firmly in place, Sandiya began contemplating learning Python, using the same effective, gradual method.\nSandiya’s story is a testament to the power of small, consistent steps. Starting with just two minutes of focused time, she transformed her skill set and realized her dream. Her journey, marked by clear goals, a structured roadmap, and adaptable persistence, is an inspiring blueprint for anyone looking to embark on a similar path. Remember, every big accomplishment starts with one small step. Just like Sandiya, you too can achieve your learning goals, one small, focused session at a time. 🌟💻🗺️\n\nRemember, coding doesn’t have to be a daunting time-sink. With the Two-Minute Rule, you’re not just learning to code; you’re integrating it into your life in manageable, enjoyable pieces. Keep it up, and watch how these minutes add up to significant progress. Happy coding, friends! 🚀💻✨"
  },
  {
    "objectID": "posts/Two_minutes_rule/index.html#final-example",
    "href": "posts/Two_minutes_rule/index.html#final-example",
    "title": "The two-minute rule for busy coders/learners",
    "section": "",
    "text": "Now we have everything we need to start these new habits. Let’s take the example of Sandiya, a geographer who wants to learn how to use R for a future article. The problem is that she knows nothing about R. So she decides to use the two-minute principle.\n\n\nOnce upon a time in the bustling city, there was a geographer named Sandiya. Passionate about urbanism, she had a dream: to create a detailed map of urban car density using geodata from parking places. But there was a catch – she didn’t know R, the programming language perfect for this task.\nStep 1: Defining the goal\nSandiya’s project was clear: analyze car density variability in various parking places over time. But to do this, she needed to learn R, master data analysis, understand web scraping, and get a grip on geospatial analysis.\nStep 2: Crafting a roadmap\nAfter fruitful discussions and online research, Sandiya outlined her learning path:\n\nBasics of R\nData Analysis Skills\nWeb Scraping Knowledge\nGeospatial Analysis with R\n\nWith her roadmap in hand, she decided to start small, applying the Two-Minute Rule.\nStep 3: Setting the habit\nEvery Tuesday at 4 pm, Sandiya’s living room transformed into her learning zone. She started with just two minutes of R practice and gradually increased her time.\nStep 4: The initial strides\nIn her first session, Sandiya installed R and RStudio, a small but crucial step. The following week, she began online exercises on W3Schools, steadily progressing through them. It was a wise choice, since the website is completly free, doesn’t require an account and has tutorials on R.\nStep 5: Expanding the learning schedule\nTwo months in, Sandiya was already diving into “R for Data Science” (a free online book to learn R). She added Thursdays at 4 pm to her schedule, now feeling more confident and eager to learn. She was already working 30 minutes per session.\nStep 6: Gaining confidence\nAfter another two months, she had honed her data analysis skills. Tackling a data analysis tutorial, she replicated the examples, cementing her understanding.\nStep 7: Diving into web scraping\nSandiya then turned to YouTube videos and blog posts to learn web scraping. She meticulously took notes, starting to collect her needed data. She needed more time, so she decided to work at least one hour per session.\nStep 8: Embracing geospatial analysis\nSimultaneously, she delved into a Bookdown on geospatial analysis in R, replicating examples and building her skills.\nStep 9: Six months of transformation\nSix months from her humble two-minute beginnings, Sandiya was working six hours weekly on R (three hours each on Tuesday and Thursday) and had reached an advanced level. She was able to submit her paper for publication.\nStep 10: Flexibility and persistence\nNot every week was perfect. Sometimes, life intervened, and Sandiya rescheduled her Tuesday sessions to Saturday mornings. But she persisted.\nStep 11: Eyeing a new challenge\nNow, comfortably adept at R and with a regular habit firmly in place, Sandiya began contemplating learning Python, using the same effective, gradual method.\nSandiya’s story is a testament to the power of small, consistent steps. Starting with just two minutes of focused time, she transformed her skill set and realized her dream. Her journey, marked by clear goals, a structured roadmap, and adaptable persistence, is an inspiring blueprint for anyone looking to embark on a similar path. Remember, every big accomplishment starts with one small step. Just like Sandiya, you too can achieve your learning goals, one small, focused session at a time. 🌟💻🗺️\n\nRemember, coding doesn’t have to be a daunting time-sink. With the Two-Minute Rule, you’re not just learning to code; you’re integrating it into your life in manageable, enjoyable pieces. Keep it up, and watch how these minutes add up to significant progress. Happy coding, friends! 🚀💻✨"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "",
    "text": "Welcome to the exciting world of polyglot programming! As a programmer, the ability to speak multiple programming languages fluently is akin to a craftsman possessing a diverse set of tools. Each language is a unique tool, designed to handle specific tasks efficiently and effectively. By being a polyglot programmer, you equip yourself with a versatile arsenal, ensuring that you always have the best tool for any job.\nEmbarking on the journey to learn multiple programming languages is a rewarding endeavor, albeit not without its challenges. The initial steps into programming can be daunting, and the learning curve for the second language often feels steeper. However, once you overcome these early hurdles, acquiring new languages becomes progressively easier and more intuitive.\nThe goal isn’t to achieve mastery in every language (we generally have one or two “mains”). Rather, it’s about reaching a level of comfort that allows you to switch between languages with ease, depending on the task at hand. It’s perfectly acceptable, and sometimes even preferable, to learn certain languages for specific use cases. For example, no one expects a web developer to build a website using Prolog. It’s all about using the right tool for the right job.\nAs we dive into the world of polyglot programming, remember: the journey is as rewarding as the destination. Let’s explore how being a polyglot opens up a universe of possibilities and makes you a more effective, versatile programmer.\n\n\n\n\nThe advantages of being a polyglot in an era of interoperability and microservices: Mastery of multiple languages enables seamless navigation and integration in microservices-based architectures.\nExample for data sciencetist: Discover how being a polyglot programmer elevates your data science capabilities, allowing you to choose the most efficient tools for data analysis, machine learning, and more.\nMy programming languages and why I use them: A personal journey through the languages I use, revealing the unique strengths and applications of each.\n\nR - The statistician’s power tool: Learn how R excels in statistical analysis, machine learning, and dashboarding, despite its slower speed.\nPython - The versatile giant: Delve into Python’s world, a beginner-friendly language known for its extensive libraries and role as the lingua franca of programming.\nJulia - The high-speed performer: Explore the world of Julia, a language that combines phenomenal speed with a focus on numerical computation, making it ideal for high-performance tasks.\nNim - The rising star: Discover Nim, a language that balances speed with easy syntax, perfect for scripting, desktop, and web app development.\nJavaScript - The web’s artist: Uncover the capabilities of JavaScript in web development and programming art, a language known for its powerful visualization tools.\n\nConclusion: Embracing diversity in programming languages\nBonus: The quirky side of my programming languages\n\nR: The ponderous professor\nPython: The popular kid with too many friends\nJulia: The speedy brainiac with a memory problem\nNim: The secret agent with few contacts\nJavaScript: The artist with a messy palette\n\n\nJoin me on this enlightening journey to explore the multifaceted world of polyglot programming. Let’s embark on this adventure together, learning, growing, and discovering the best programming tools for every challenge we might face!\n\n\n\nIn today’s rapidly evolving tech landscape, where interoperability among programming languages and the adoption of microservices architecture are becoming the norm, being a polyglot programmer is more advantageous than ever. This trend towards a more interconnected and modular approach in software development highlights the immense value of versatility in programming skills.\nThe ability to fluently use multiple languages allows you to weave through different ecosystems with ease. It’s like being a skilled diplomat who can navigate diverse cultures effortlessly. In a world where applications are increasingly built using microservices – each potentially written in a different language – the polyglot programmer stands out as a versatile and invaluable asset. They can understand, connect, and integrate various services, regardless of the language in which they’re written.\nMoreover, with languages becoming more interoperable, the lines between them are blurring. Libraries and frameworks are often available across multiple languages, and being knowledgeable in several of them enables you to choose the most effective tool for each specific task. This flexibility not only enhances the quality and efficiency of your work but also broadens your perspective, allowing you to approach problems with a more holistic and creative mindset.\nIn essence, being a polyglot in this era of interoperability and microservices is like having a master key to the vast and intricate world of programming. It empowers you to build more robust, scalable, and innovative applications, making you an invaluable resource in any development team.\n\n\n\nIn the realm of data science, Python often shines as the star, casting a long shadow with its popularity and widespread industry use. However, hidden in this shadow are gems often overlooked - R and Julia. These languages are not just alternatives; they are powerful tools in their own right, each with unique strengths and capabilities.\nFor years, the debate of “Python or R for Data Science?” has echoed in the halls of academia and industry. This question, however, harbors a misleading assumption – that one must choose a single language to commit to for life. It’s like saying you should only ever use a hammer for all your construction needs, ignoring the precision of a screwdriver or the strength of a wrench.\nThe Python advocates have done a stellar job, leading many to choose Python, especially since it’s more prevalent in the industry. But this approach can be limiting. Why confine ourselves to the most popular or the ‘chosen one’ when the landscape of programming is so rich and diverse?\nI once fell into the “Just use Python” trap. It was an excellent place to start, but as I delved deeper into data science, I realized the limitations of sticking to one language. My journey led me to R, a language that excels in statistical analysis and advanced data manipulation. It opened my eyes to new methodologies, better suited for certain types of data challenges.\nThen came Julia, a language that blends the ease of Python with the speed of C. It was like discovering a sports car after years of driving a reliable city car – exhilarating, fast, and efficient, especially for heavy numerical computations.\nAs a polyglot, I now navigate these languages with ease, choosing the best one for the task at hand. Python for its versatility and rich library ecosystem, R for its unparalleled statistical tools, and Julia for high-performance computing tasks.\nThe real question we should be asking is not “Which language should I choose?” but rather “Which language should I learn first?” The journey of a polyglot in data science is not about limiting oneself to a single language; it’s about exploring and embracing the unique strengths of each language. It’s a journey of continuous learning, adaptation, and growth.\nSo, whether you’re a budding data scientist or an experienced analyst, remember: the world of data science is not monolingual. It’s a rich tapestry of languages, each offering its own perspective on how to solve the complex puzzles of data.\n\n\n\n\n\nMy journey as a polyglot programmer began with Python, the gateway into the vast universe of coding. Python was like the first chapter of an enthralling novel, introducing me to the fundamentals of programming with its beginner-friendly syntax and vast libraries. It laid the foundation for my programming skills and shaped my initial understanding of coding principles.\nHowever, as I ventured further into the programming world, my needs evolved, and I began to explore other languages, each adding new dimensions to my skillset.\n\n\n\nR came into my life as a revelation, especially for data analysis and statistical modeling. Its straightforward approach to statistical analysis and the tidyverse ecosystem dramatically enhanced my ability to handle complex data sets. The extensive visualization libraries in R allowed me to present data in compelling, informative ways. Learning R was like gaining a superpower in data analytics, enabling me to delve deeper into machine learning and other advanced statistical models. Don’t get me wrong! Python was good for that, but R is excellent!\n\n\n\nJulia was the next chapter in my journey, a language that seamlessly bridged the gap between ease of use and high-performance computing. Its speed, comparable to C, was a game-changer for heavy numerical computations. The ease of translating my knowledge from Python and R to Julia was an unexpected bonus, further enriching my programming repertoire. Julia’s dynamic type system and built-in linear algebra capabilities made it a formidable tool in my arsenal. Also knowing that it solve the two programming language problem, make it a nice choice.\n\n\n\nNim entered my world as a scripting and application development tool. Its easy syntax, strong type system, and fast compilation speed made it an ideal choice for developing desktop and web applications. Nim’s ability to transcompile into C, C++, Objective-C, and JavaScript opened new avenues for cross-platform executables, enhancing my versatility in the team.\n\n\n\nFinally, JavaScript brought a new flavor to my skill palette, especially in web development and creative programming art. Its power in creating amazing visualizations and its widespread use across various programming platforms made it an invaluable addition to my skillset.\n\n\n\nIn a team setting, the polyglot capabilities may be a tremendous asset. Depending on the project’s needs and the existing skills within the team, I could adapt and choose the role that best fits the situation. Whether it’s handling statistical analysis with R, engaging in high-performance computing with Julia, developing applications with Nim, or creating interactive web elements with JavaScript, I bring a level of flexibility that greatly enhances the team’s overall capabilities (let’s not forget the amazing Python).\nThis journey from Python to R, Julia, Nim, and JavaScript was not just about acquiring new languages; it was about embracing the benefits we discussed in the introduction. It’s a testament to the power of being a polyglot in programming – the ability to choose the right tool for the right job, the joy of continuous learning, and the satisfaction of being adaptable and versatile in a rapidly evolving tech landscape.\nAs I continue my journey, I remain excited and curious about what other languages and skills I might add to my toolkit. Each language has not only filled a specific need but also broadened my perspective, making me a more complete and effective programmer. This is the essence of being a polyglot – a never-ending adventure of growth, discovery, and empowerment."
  },
  {
    "objectID": "posts/index.html#introduction-the-power-of-polyglot-programming",
    "href": "posts/index.html#introduction-the-power-of-polyglot-programming",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "",
    "text": "Welcome to the exciting world of polyglot programming! As a programmer, the ability to speak multiple programming languages fluently is akin to a craftsman possessing a diverse set of tools. Each language is a unique tool, designed to handle specific tasks efficiently and effectively. By being a polyglot programmer, you equip yourself with a versatile arsenal, ensuring that you always have the best tool for any job.\nEmbarking on the journey to learn multiple programming languages is a rewarding endeavor, albeit not without its challenges. The initial steps into programming can be daunting, and the learning curve for the second language often feels steeper. However, once you overcome these early hurdles, acquiring new languages becomes progressively easier and more intuitive.\nThe goal isn’t to achieve mastery in every language (we generally have one or two “mains”). Rather, it’s about reaching a level of comfort that allows you to switch between languages with ease, depending on the task at hand. It’s perfectly acceptable, and sometimes even preferable, to learn certain languages for specific use cases. For example, no one expects a web developer to build a website using Prolog. It’s all about using the right tool for the right job.\nAs we dive into the world of polyglot programming, remember: the journey is as rewarding as the destination. Let’s explore how being a polyglot opens up a universe of possibilities and makes you a more effective, versatile programmer."
  },
  {
    "objectID": "posts/index.html#table-of-contents",
    "href": "posts/index.html#table-of-contents",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "",
    "text": "The advantages of being a polyglot in an era of interoperability and microservices: Mastery of multiple languages enables seamless navigation and integration in microservices-based architectures.\nExample for data sciencetist: Discover how being a polyglot programmer elevates your data science capabilities, allowing you to choose the most efficient tools for data analysis, machine learning, and more.\nMy programming languages and why I use them: A personal journey through the languages I use, revealing the unique strengths and applications of each.\n\nR - The statistician’s power tool: Learn how R excels in statistical analysis, machine learning, and dashboarding, despite its slower speed.\nPython - The versatile giant: Delve into Python’s world, a beginner-friendly language known for its extensive libraries and role as the lingua franca of programming.\nJulia - The high-speed performer: Explore the world of Julia, a language that combines phenomenal speed with a focus on numerical computation, making it ideal for high-performance tasks.\nNim - The rising star: Discover Nim, a language that balances speed with easy syntax, perfect for scripting, desktop, and web app development.\nJavaScript - The web’s artist: Uncover the capabilities of JavaScript in web development and programming art, a language known for its powerful visualization tools.\n\nConclusion: Embracing diversity in programming languages\nBonus: The quirky side of my programming languages\n\nR: The ponderous professor\nPython: The popular kid with too many friends\nJulia: The speedy brainiac with a memory problem\nNim: The secret agent with few contacts\nJavaScript: The artist with a messy palette\n\n\nJoin me on this enlightening journey to explore the multifaceted world of polyglot programming. Let’s embark on this adventure together, learning, growing, and discovering the best programming tools for every challenge we might face!"
  },
  {
    "objectID": "posts/index.html#the-advantages-of-being-a-polyglot-in-an-era-of-interoperability-and-microservices",
    "href": "posts/index.html#the-advantages-of-being-a-polyglot-in-an-era-of-interoperability-and-microservices",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "",
    "text": "In today’s rapidly evolving tech landscape, where interoperability among programming languages and the adoption of microservices architecture are becoming the norm, being a polyglot programmer is more advantageous than ever. This trend towards a more interconnected and modular approach in software development highlights the immense value of versatility in programming skills.\nThe ability to fluently use multiple languages allows you to weave through different ecosystems with ease. It’s like being a skilled diplomat who can navigate diverse cultures effortlessly. In a world where applications are increasingly built using microservices – each potentially written in a different language – the polyglot programmer stands out as a versatile and invaluable asset. They can understand, connect, and integrate various services, regardless of the language in which they’re written.\nMoreover, with languages becoming more interoperable, the lines between them are blurring. Libraries and frameworks are often available across multiple languages, and being knowledgeable in several of them enables you to choose the most effective tool for each specific task. This flexibility not only enhances the quality and efficiency of your work but also broadens your perspective, allowing you to approach problems with a more holistic and creative mindset.\nIn essence, being a polyglot in this era of interoperability and microservices is like having a master key to the vast and intricate world of programming. It empowers you to build more robust, scalable, and innovative applications, making you an invaluable resource in any development team."
  },
  {
    "objectID": "posts/index.html#example-for-data-science-beyond-python---embracing-r-and-julia",
    "href": "posts/index.html#example-for-data-science-beyond-python---embracing-r-and-julia",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "",
    "text": "In the realm of data science, Python often shines as the star, casting a long shadow with its popularity and widespread industry use. However, hidden in this shadow are gems often overlooked - R and Julia. These languages are not just alternatives; they are powerful tools in their own right, each with unique strengths and capabilities.\nFor years, the debate of “Python or R for Data Science?” has echoed in the halls of academia and industry. This question, however, harbors a misleading assumption – that one must choose a single language to commit to for life. It’s like saying you should only ever use a hammer for all your construction needs, ignoring the precision of a screwdriver or the strength of a wrench.\nThe Python advocates have done a stellar job, leading many to choose Python, especially since it’s more prevalent in the industry. But this approach can be limiting. Why confine ourselves to the most popular or the ‘chosen one’ when the landscape of programming is so rich and diverse?\nI once fell into the “Just use Python” trap. It was an excellent place to start, but as I delved deeper into data science, I realized the limitations of sticking to one language. My journey led me to R, a language that excels in statistical analysis and advanced data manipulation. It opened my eyes to new methodologies, better suited for certain types of data challenges.\nThen came Julia, a language that blends the ease of Python with the speed of C. It was like discovering a sports car after years of driving a reliable city car – exhilarating, fast, and efficient, especially for heavy numerical computations.\nAs a polyglot, I now navigate these languages with ease, choosing the best one for the task at hand. Python for its versatility and rich library ecosystem, R for its unparalleled statistical tools, and Julia for high-performance computing tasks.\nThe real question we should be asking is not “Which language should I choose?” but rather “Which language should I learn first?” The journey of a polyglot in data science is not about limiting oneself to a single language; it’s about exploring and embracing the unique strengths of each language. It’s a journey of continuous learning, adaptation, and growth.\nSo, whether you’re a budding data scientist or an experienced analyst, remember: the world of data science is not monolingual. It’s a rich tapestry of languages, each offering its own perspective on how to solve the complex puzzles of data."
  },
  {
    "objectID": "posts/index.html#my-programming-languages-and-why-i-use-them-a-journey-of-flexibility-and-skill",
    "href": "posts/index.html#my-programming-languages-and-why-i-use-them-a-journey-of-flexibility-and-skill",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "",
    "text": "My journey as a polyglot programmer began with Python, the gateway into the vast universe of coding. Python was like the first chapter of an enthralling novel, introducing me to the fundamentals of programming with its beginner-friendly syntax and vast libraries. It laid the foundation for my programming skills and shaped my initial understanding of coding principles.\nHowever, as I ventured further into the programming world, my needs evolved, and I began to explore other languages, each adding new dimensions to my skillset.\n\n\n\nR came into my life as a revelation, especially for data analysis and statistical modeling. Its straightforward approach to statistical analysis and the tidyverse ecosystem dramatically enhanced my ability to handle complex data sets. The extensive visualization libraries in R allowed me to present data in compelling, informative ways. Learning R was like gaining a superpower in data analytics, enabling me to delve deeper into machine learning and other advanced statistical models. Don’t get me wrong! Python was good for that, but R is excellent!\n\n\n\nJulia was the next chapter in my journey, a language that seamlessly bridged the gap between ease of use and high-performance computing. Its speed, comparable to C, was a game-changer for heavy numerical computations. The ease of translating my knowledge from Python and R to Julia was an unexpected bonus, further enriching my programming repertoire. Julia’s dynamic type system and built-in linear algebra capabilities made it a formidable tool in my arsenal. Also knowing that it solve the two programming language problem, make it a nice choice.\n\n\n\nNim entered my world as a scripting and application development tool. Its easy syntax, strong type system, and fast compilation speed made it an ideal choice for developing desktop and web applications. Nim’s ability to transcompile into C, C++, Objective-C, and JavaScript opened new avenues for cross-platform executables, enhancing my versatility in the team.\n\n\n\nFinally, JavaScript brought a new flavor to my skill palette, especially in web development and creative programming art. Its power in creating amazing visualizations and its widespread use across various programming platforms made it an invaluable addition to my skillset.\n\n\n\nIn a team setting, the polyglot capabilities may be a tremendous asset. Depending on the project’s needs and the existing skills within the team, I could adapt and choose the role that best fits the situation. Whether it’s handling statistical analysis with R, engaging in high-performance computing with Julia, developing applications with Nim, or creating interactive web elements with JavaScript, I bring a level of flexibility that greatly enhances the team’s overall capabilities (let’s not forget the amazing Python).\nThis journey from Python to R, Julia, Nim, and JavaScript was not just about acquiring new languages; it was about embracing the benefits we discussed in the introduction. It’s a testament to the power of being a polyglot in programming – the ability to choose the right tool for the right job, the joy of continuous learning, and the satisfaction of being adaptable and versatile in a rapidly evolving tech landscape.\nAs I continue my journey, I remain excited and curious about what other languages and skills I might add to my toolkit. Each language has not only filled a specific need but also broadened my perspective, making me a more complete and effective programmer. This is the essence of being a polyglot – a never-ending adventure of growth, discovery, and empowerment."
  },
  {
    "objectID": "posts/index.html#bonus-the-quirky-side-of-my-programming-languages",
    "href": "posts/index.html#bonus-the-quirky-side-of-my-programming-languages",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "Bonus: The quirky side of my programming languages",
    "text": "Bonus: The quirky side of my programming languages\nAh, the beloved languages of my programming life – each one a unique character in the grand narrative of coding. But, let’s be honest, they each come with their own set of quirks and idiosyncrasies. Here’s a lighthearted look at the problems with my chosen languages, because after all, nothing and no one is perfect!\n\nR: The ponderous professor\nR, oh R, you’re like that brilliant professor who knows everything about statistics but takes an eternity to get to the point. Your performance can be slower than a snail racing uphill. And your love for numerical computation is so exclusive, it’s as if you’re saying, “Characters? What are those?”. Also, it would be good if you could more often go out of your University and go in production. Life is not only about statistic you know?\n\n\nPython: The popular kid with too many friends\nPython, you’re slow! You’re the cool kid on the block, loved by all, but sometimes you spread yourself too thin. You try to be everything for everyone, and it can lead to a lack of coherence. Plus, your popularity contest sometimes overshadows other equally deserving languages (Yes you’re overrated, sorry!). And let’s be honest, without C/C++ giving you your pocket money, where would you be? Maybe the shadow of Lua? Would you have as much friends? Oh, Did I mention you’re slow?\n\n\nJulia: The speedy brainiac with a memory problem\nJulia, you’re lightning-fast, but your memory usage is like someone who shops too much on a sale day - you just can’t help grabbing everything! And let’s not get started on your slow compilation time. It’s like waiting for a gourmet meal; great once it’s there, but oh, the wait! Please, let’s not talk about your executables, I don’t want to ruin my mood.\n\n\nNim: The secret agent with few contacts\nNim, you’re fast and efficient, like a secret agent, but you’re a bit of a loner. Seriously no one know you, you are invisible! Julia is younger than you and focus in a small community and is still more popular than you, how? Your small community and the lack of comprehensive documentation can make you feel like you’re part of an exclusive club that’s hard for newcomers to join. Having said that, I’m making the assumption that you really want to be discovered, but that remains to be seen…\n\n\nJavaScript: The artist with a messy palette\nJavaScript, the artist of the web, your creativity knows no bounds. But sometimes, your syntax is as unpredictable as a toddler’s mood swings. And the amount of boilerplate code you require – it’s like asking for a five-course meal when all I want is a sandwich!\n\n\nEmbracing bias with a pinch of salt\nNow, I must sheepishly admit, like many programmers, I harbor biases towards my chosen languages. It’s natural; we’re human, not machines. Our backgrounds, experiences, and preferences shape our choices. But the key is to be aware of these biases, not to be absolutist about our choices, and to always remain open to learning.\nEvery programming language has its flaws, and it’s important to recognize them humorously and with a grain of salt. What’s essential is understanding that these ‘flaws’ are often what make a language uniquely suited for certain tasks. It’s not about finding the perfect language; it’s about finding the right language for the right job, warts and all.\nIn the end, every programming language is ‘bad’ in its own unique and useful way. They’re like friends with different personalities; some are reliable, some are flashy, some are deep thinkers, and others are social butterflies. But together, they make for a diverse and capable team. So, let’s continue to embrace the quirky world of programming languages, with all its imperfections and charm!"
  },
  {
    "objectID": "posts/Polyglot_programmer/index.html",
    "href": "posts/Polyglot_programmer/index.html",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "",
    "text": "Welcome to the exciting world of polyglot programming! As a programmer, the ability to speak multiple programming languages fluently is akin to a craftsman possessing a diverse set of tools. Each language is a unique tool, designed to handle specific tasks efficiently and effectively. By being a polyglot programmer, you equip yourself with a versatile arsenal, ensuring that you always have the best tool for any job.\nEmbarking on the journey to learn multiple programming languages is a rewarding endeavor, albeit not without its challenges. The initial steps into programming can be daunting, and the learning curve for the second language often feels steeper. However, once you overcome these early hurdles, acquiring new languages becomes progressively easier and more intuitive.\nThe goal isn’t to achieve mastery in every language (we generally have one or two “mains”). Rather, it’s about reaching a level of comfort that allows you to switch between languages with ease, depending on the task at hand. It’s perfectly acceptable, and sometimes even preferable, to learn certain languages for specific use cases. For example, no one expects a web developer to build a website using Prolog. It’s all about using the right tool for the right job.\nAs we dive into the world of polyglot programming, remember: the journey is as rewarding as the destination. Let’s explore how being a polyglot opens up a universe of possibilities and makes you a more effective, versatile programmer.\n\n\n\n\nThe advantages of being a polyglot in an era of interoperability and microservices: Mastery of multiple languages enables seamless navigation and integration in microservices-based architectures.\nExample for data sciencetist: Discover how being a polyglot programmer elevates your data science capabilities, allowing you to choose the most efficient tools for data analysis, machine learning, and more.\nMy programming languages and why I use them: A personal journey through the languages I use, revealing the unique strengths and applications of each.\n\nR - The statistician’s power tool: Learn how R excels in statistical analysis, machine learning, and dashboarding, despite its slower speed.\nPython - The versatile giant: Delve into Python’s world, a beginner-friendly language known for its extensive libraries and role as the lingua franca of programming.\nJulia - The high-speed performer: Explore the world of Julia, a language that combines phenomenal speed with a focus on numerical computation, making it ideal for high-performance tasks.\nNim - The rising star: Discover Nim, a language that balances speed with easy syntax, perfect for scripting, desktop, and web app development.\nJavaScript - The web’s artist: Uncover the capabilities of JavaScript in web development and programming art, a language known for its powerful visualization tools.\n\nConclusion: Embracing diversity in programming languages\nBonus: The quirky side of my programming languages\n\nR: The ponderous professor\nPython: The popular kid with too many friends\nJulia: The speedy brainiac with a memory problem\nNim: The secret agent with few contacts\nJavaScript: The artist with a messy palette\n\n\nJoin me on this enlightening journey to explore the multifaceted world of polyglot programming. Let’s embark on this adventure together, learning, growing, and discovering the best programming tools for every challenge we might face!\n\n\n\nIn today’s rapidly evolving tech landscape, where interoperability among programming languages and the adoption of microservices architecture are becoming the norm, being a polyglot programmer is more advantageous than ever. This trend towards a more interconnected and modular approach in software development highlights the immense value of versatility in programming skills.\nThe ability to fluently use multiple languages allows you to weave through different ecosystems with ease. It’s like being a skilled diplomat who can navigate diverse cultures effortlessly. In a world where applications are increasingly built using microservices – each potentially written in a different language – the polyglot programmer stands out as a versatile and invaluable asset. They can understand, connect, and integrate various services, regardless of the language in which they’re written.\nMoreover, with languages becoming more interoperable, the lines between them are blurring. Libraries and frameworks are often available across multiple languages, and being knowledgeable in several of them enables you to choose the most effective tool for each specific task. This flexibility not only enhances the quality and efficiency of your work but also broadens your perspective, allowing you to approach problems with a more holistic and creative mindset.\nIn essence, being a polyglot in this era of interoperability and microservices is like having a master key to the vast and intricate world of programming. It empowers you to build more robust, scalable, and innovative applications, making you an invaluable resource in any development team.\n\n\n\nIn the realm of data science, Python often shines as the star, casting a long shadow with its popularity and widespread industry use. However, hidden in this shadow are gems often overlooked - R and Julia. These languages are not just alternatives; they are powerful tools in their own right, each with unique strengths and capabilities.\nFor years, the debate of “Python or R for Data Science?” has echoed in the halls of academia and industry. This question, however, harbors a misleading assumption – that one must choose a single language to commit to for life. It’s like saying you should only ever use a hammer for all your construction needs, ignoring the precision of a screwdriver or the strength of a wrench.\nThe Python advocates have done a stellar job, leading many to choose Python, especially since it’s more prevalent in the industry. But this approach can be limiting. Why confine ourselves to the most popular or the ‘chosen one’ when the landscape of programming is so rich and diverse?\nI once fell into the “Just use Python” trap. It was an excellent place to start, but as I delved deeper into data science, I realized the limitations of sticking to one language. My journey led me to R, a language that excels in statistical analysis and advanced data manipulation. It opened my eyes to new methodologies, better suited for certain types of data challenges.\nThen came Julia, a language that blends the ease of Python with the speed of C. It was like discovering a sports car after years of driving a reliable city car – exhilarating, fast, and efficient, especially for heavy numerical computations.\nAs a polyglot, I now navigate these languages with ease, choosing the best one for the task at hand. Python for its versatility and rich library ecosystem, R for its unparalleled statistical tools, and Julia for high-performance computing tasks.\nThe real question we should be asking is not “Which language should I choose?” but rather “Which language should I learn first?” The journey of a polyglot in data science is not about limiting oneself to a single language; it’s about exploring and embracing the unique strengths of each language. It’s a journey of continuous learning, adaptation, and growth.\nSo, whether you’re a budding data scientist or an experienced analyst, remember: the world of data science is not monolingual. It’s a rich tapestry of languages, each offering its own perspective on how to solve the complex puzzles of data.\n\n\n\n\n\nMy journey as a polyglot programmer began with Python, the gateway into the vast universe of coding. Python was like the first chapter of an enthralling novel, introducing me to the fundamentals of programming with its beginner-friendly syntax and vast libraries. It laid the foundation for my programming skills and shaped my initial understanding of coding principles.\nHowever, as I ventured further into the programming world, my needs evolved, and I began to explore other languages, each adding new dimensions to my skillset.\n\n\n\nR came into my life as a revelation, especially for data analysis and statistical modeling. Its straightforward approach to statistical analysis and the tidyverse ecosystem dramatically enhanced my ability to handle complex data sets. The extensive visualization libraries in R allowed me to present data in compelling, informative ways. Learning R was like gaining a superpower in data analytics, enabling me to delve deeper into machine learning and other advanced statistical models. Don’t get me wrong! Python was good for that, but R is excellent!\n\n\n\nJulia was the next chapter in my journey, a language that seamlessly bridged the gap between ease of use and high-performance computing. Its speed, comparable to C, was a game-changer for heavy numerical computations. The ease of translating my knowledge from Python and R to Julia was an unexpected bonus, further enriching my programming repertoire. Julia’s dynamic type system and built-in linear algebra capabilities made it a formidable tool in my arsenal. Also knowing that it solve the two programming language problem, make it a nice choice.\n\n\n\nNim entered my world as a scripting and application development tool. Its easy syntax, strong type system, and fast compilation speed made it an ideal choice for developing desktop and web applications. Nim’s ability to transcompile into C, C++, Objective-C, and JavaScript opened new avenues for cross-platform executables, enhancing my versatility in the team.\n\n\n\nFinally, JavaScript brought a new flavor to my skill palette, especially in web development and creative programming art. Its power in creating amazing visualizations and its widespread use across various programming platforms made it an invaluable addition to my skillset.\n\n\n\nIn a team setting, the polyglot capabilities may be a tremendous asset. Depending on the project’s needs and the existing skills within the team, I could adapt and choose the role that best fits the situation. Whether it’s handling statistical analysis with R, engaging in high-performance computing with Julia, developing applications with Nim, or creating interactive web elements with JavaScript, I bring a level of flexibility that greatly enhances the team’s overall capabilities (let’s not forget the amazing Python).\nThis journey from Python to R, Julia, Nim, and JavaScript was not just about acquiring new languages; it was about embracing the benefits we discussed in the introduction. It’s a testament to the power of being a polyglot in programming – the ability to choose the right tool for the right job, the joy of continuous learning, and the satisfaction of being adaptable and versatile in a rapidly evolving tech landscape.\nAs I continue my journey, I remain excited and curious about what other languages and skills I might add to my toolkit. Each language has not only filled a specific need but also broadened my perspective, making me a more complete and effective programmer. This is the essence of being a polyglot – a never-ending adventure of growth, discovery, and empowerment."
  },
  {
    "objectID": "posts/Polyglot_programmer/index.html#introduction-the-power-of-polyglot-programming",
    "href": "posts/Polyglot_programmer/index.html#introduction-the-power-of-polyglot-programming",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "",
    "text": "Welcome to the exciting world of polyglot programming! As a programmer, the ability to speak multiple programming languages fluently is akin to a craftsman possessing a diverse set of tools. Each language is a unique tool, designed to handle specific tasks efficiently and effectively. By being a polyglot programmer, you equip yourself with a versatile arsenal, ensuring that you always have the best tool for any job.\nEmbarking on the journey to learn multiple programming languages is a rewarding endeavor, albeit not without its challenges. The initial steps into programming can be daunting, and the learning curve for the second language often feels steeper. However, once you overcome these early hurdles, acquiring new languages becomes progressively easier and more intuitive.\nThe goal isn’t to achieve mastery in every language (we generally have one or two “mains”). Rather, it’s about reaching a level of comfort that allows you to switch between languages with ease, depending on the task at hand. It’s perfectly acceptable, and sometimes even preferable, to learn certain languages for specific use cases. For example, no one expects a web developer to build a website using Prolog. It’s all about using the right tool for the right job.\nAs we dive into the world of polyglot programming, remember: the journey is as rewarding as the destination. Let’s explore how being a polyglot opens up a universe of possibilities and makes you a more effective, versatile programmer."
  },
  {
    "objectID": "posts/Polyglot_programmer/index.html#table-of-contents",
    "href": "posts/Polyglot_programmer/index.html#table-of-contents",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "",
    "text": "The advantages of being a polyglot in an era of interoperability and microservices: Mastery of multiple languages enables seamless navigation and integration in microservices-based architectures.\nExample for data sciencetist: Discover how being a polyglot programmer elevates your data science capabilities, allowing you to choose the most efficient tools for data analysis, machine learning, and more.\nMy programming languages and why I use them: A personal journey through the languages I use, revealing the unique strengths and applications of each.\n\nR - The statistician’s power tool: Learn how R excels in statistical analysis, machine learning, and dashboarding, despite its slower speed.\nPython - The versatile giant: Delve into Python’s world, a beginner-friendly language known for its extensive libraries and role as the lingua franca of programming.\nJulia - The high-speed performer: Explore the world of Julia, a language that combines phenomenal speed with a focus on numerical computation, making it ideal for high-performance tasks.\nNim - The rising star: Discover Nim, a language that balances speed with easy syntax, perfect for scripting, desktop, and web app development.\nJavaScript - The web’s artist: Uncover the capabilities of JavaScript in web development and programming art, a language known for its powerful visualization tools.\n\nConclusion: Embracing diversity in programming languages\nBonus: The quirky side of my programming languages\n\nR: The ponderous professor\nPython: The popular kid with too many friends\nJulia: The speedy brainiac with a memory problem\nNim: The secret agent with few contacts\nJavaScript: The artist with a messy palette\n\n\nJoin me on this enlightening journey to explore the multifaceted world of polyglot programming. Let’s embark on this adventure together, learning, growing, and discovering the best programming tools for every challenge we might face!"
  },
  {
    "objectID": "posts/Polyglot_programmer/index.html#the-advantages-of-being-a-polyglot-in-an-era-of-interoperability-and-microservices",
    "href": "posts/Polyglot_programmer/index.html#the-advantages-of-being-a-polyglot-in-an-era-of-interoperability-and-microservices",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "",
    "text": "In today’s rapidly evolving tech landscape, where interoperability among programming languages and the adoption of microservices architecture are becoming the norm, being a polyglot programmer is more advantageous than ever. This trend towards a more interconnected and modular approach in software development highlights the immense value of versatility in programming skills.\nThe ability to fluently use multiple languages allows you to weave through different ecosystems with ease. It’s like being a skilled diplomat who can navigate diverse cultures effortlessly. In a world where applications are increasingly built using microservices – each potentially written in a different language – the polyglot programmer stands out as a versatile and invaluable asset. They can understand, connect, and integrate various services, regardless of the language in which they’re written.\nMoreover, with languages becoming more interoperable, the lines between them are blurring. Libraries and frameworks are often available across multiple languages, and being knowledgeable in several of them enables you to choose the most effective tool for each specific task. This flexibility not only enhances the quality and efficiency of your work but also broadens your perspective, allowing you to approach problems with a more holistic and creative mindset.\nIn essence, being a polyglot in this era of interoperability and microservices is like having a master key to the vast and intricate world of programming. It empowers you to build more robust, scalable, and innovative applications, making you an invaluable resource in any development team."
  },
  {
    "objectID": "posts/Polyglot_programmer/index.html#example-for-data-science-beyond-python---embracing-r-and-julia",
    "href": "posts/Polyglot_programmer/index.html#example-for-data-science-beyond-python---embracing-r-and-julia",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "",
    "text": "In the realm of data science, Python often shines as the star, casting a long shadow with its popularity and widespread industry use. However, hidden in this shadow are gems often overlooked - R and Julia. These languages are not just alternatives; they are powerful tools in their own right, each with unique strengths and capabilities.\nFor years, the debate of “Python or R for Data Science?” has echoed in the halls of academia and industry. This question, however, harbors a misleading assumption – that one must choose a single language to commit to for life. It’s like saying you should only ever use a hammer for all your construction needs, ignoring the precision of a screwdriver or the strength of a wrench.\nThe Python advocates have done a stellar job, leading many to choose Python, especially since it’s more prevalent in the industry. But this approach can be limiting. Why confine ourselves to the most popular or the ‘chosen one’ when the landscape of programming is so rich and diverse?\nI once fell into the “Just use Python” trap. It was an excellent place to start, but as I delved deeper into data science, I realized the limitations of sticking to one language. My journey led me to R, a language that excels in statistical analysis and advanced data manipulation. It opened my eyes to new methodologies, better suited for certain types of data challenges.\nThen came Julia, a language that blends the ease of Python with the speed of C. It was like discovering a sports car after years of driving a reliable city car – exhilarating, fast, and efficient, especially for heavy numerical computations.\nAs a polyglot, I now navigate these languages with ease, choosing the best one for the task at hand. Python for its versatility and rich library ecosystem, R for its unparalleled statistical tools, and Julia for high-performance computing tasks.\nThe real question we should be asking is not “Which language should I choose?” but rather “Which language should I learn first?” The journey of a polyglot in data science is not about limiting oneself to a single language; it’s about exploring and embracing the unique strengths of each language. It’s a journey of continuous learning, adaptation, and growth.\nSo, whether you’re a budding data scientist or an experienced analyst, remember: the world of data science is not monolingual. It’s a rich tapestry of languages, each offering its own perspective on how to solve the complex puzzles of data."
  },
  {
    "objectID": "posts/Polyglot_programmer/index.html#my-programming-languages-and-why-i-use-them-a-journey-of-flexibility-and-skill",
    "href": "posts/Polyglot_programmer/index.html#my-programming-languages-and-why-i-use-them-a-journey-of-flexibility-and-skill",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "",
    "text": "My journey as a polyglot programmer began with Python, the gateway into the vast universe of coding. Python was like the first chapter of an enthralling novel, introducing me to the fundamentals of programming with its beginner-friendly syntax and vast libraries. It laid the foundation for my programming skills and shaped my initial understanding of coding principles.\nHowever, as I ventured further into the programming world, my needs evolved, and I began to explore other languages, each adding new dimensions to my skillset.\n\n\n\nR came into my life as a revelation, especially for data analysis and statistical modeling. Its straightforward approach to statistical analysis and the tidyverse ecosystem dramatically enhanced my ability to handle complex data sets. The extensive visualization libraries in R allowed me to present data in compelling, informative ways. Learning R was like gaining a superpower in data analytics, enabling me to delve deeper into machine learning and other advanced statistical models. Don’t get me wrong! Python was good for that, but R is excellent!\n\n\n\nJulia was the next chapter in my journey, a language that seamlessly bridged the gap between ease of use and high-performance computing. Its speed, comparable to C, was a game-changer for heavy numerical computations. The ease of translating my knowledge from Python and R to Julia was an unexpected bonus, further enriching my programming repertoire. Julia’s dynamic type system and built-in linear algebra capabilities made it a formidable tool in my arsenal. Also knowing that it solve the two programming language problem, make it a nice choice.\n\n\n\nNim entered my world as a scripting and application development tool. Its easy syntax, strong type system, and fast compilation speed made it an ideal choice for developing desktop and web applications. Nim’s ability to transcompile into C, C++, Objective-C, and JavaScript opened new avenues for cross-platform executables, enhancing my versatility in the team.\n\n\n\nFinally, JavaScript brought a new flavor to my skill palette, especially in web development and creative programming art. Its power in creating amazing visualizations and its widespread use across various programming platforms made it an invaluable addition to my skillset.\n\n\n\nIn a team setting, the polyglot capabilities may be a tremendous asset. Depending on the project’s needs and the existing skills within the team, I could adapt and choose the role that best fits the situation. Whether it’s handling statistical analysis with R, engaging in high-performance computing with Julia, developing applications with Nim, or creating interactive web elements with JavaScript, I bring a level of flexibility that greatly enhances the team’s overall capabilities (let’s not forget the amazing Python).\nThis journey from Python to R, Julia, Nim, and JavaScript was not just about acquiring new languages; it was about embracing the benefits we discussed in the introduction. It’s a testament to the power of being a polyglot in programming – the ability to choose the right tool for the right job, the joy of continuous learning, and the satisfaction of being adaptable and versatile in a rapidly evolving tech landscape.\nAs I continue my journey, I remain excited and curious about what other languages and skills I might add to my toolkit. Each language has not only filled a specific need but also broadened my perspective, making me a more complete and effective programmer. This is the essence of being a polyglot – a never-ending adventure of growth, discovery, and empowerment."
  },
  {
    "objectID": "posts/Polyglot_programmer/index.html#bonus-the-quirky-side-of-my-programming-languages",
    "href": "posts/Polyglot_programmer/index.html#bonus-the-quirky-side-of-my-programming-languages",
    "title": "The polyglot programmer: mastering multiple languages for optimal solutions",
    "section": "Bonus: The quirky side of my programming languages",
    "text": "Bonus: The quirky side of my programming languages\nAh, the beloved languages of my programming life – each one a unique character in the grand narrative of coding. But, let’s be honest, they each come with their own set of quirks and idiosyncrasies. Here’s a lighthearted look at the problems with my chosen languages, because after all, nothing and no one is perfect!\n\nR: The ponderous professor\nR, oh R, you’re like that brilliant professor who knows everything about statistics but takes an eternity to get to the point. Your performance can be slower than a snail racing uphill. And your love for numerical computation is so exclusive, it’s as if you’re saying, “Characters? What are those?”. Also, it would be good if you could more often go out of your University and go in production. Life is not only about statistic you know?\n\n\nPython: The popular kid with too many friends\nPython, you’re slow! You’re the cool kid on the block, loved by all, but sometimes you spread yourself too thin. You try to be everything for everyone, and it can lead to a lack of coherence. Plus, your popularity contest sometimes overshadows other equally deserving languages (Yes you’re overrated, sorry!). And let’s be honest, without C/C++ giving you your pocket money, where would you be? Maybe the shadow of Lua? Would you have as much friends? Oh, Did I mention you’re slow?\n\n\nJulia: The speedy brainiac with a memory problem\nJulia, you’re lightning-fast, but your memory usage is like someone who shops too much on a sale day - you just can’t help grabbing everything! And let’s not get started on your slow compilation time. It’s like waiting for a gourmet meal; great once it’s there, but oh, the wait! Please, let’s not talk about your executables, I don’t want to ruin my mood.\n\n\nNim: The secret agent with few contacts\nNim, you’re fast and efficient, like a secret agent, but you’re a bit of a loner. Seriously no one know you, you are invisible! Julia is younger than you and focus in a small community and is still more popular than you, how? Your small community and the lack of comprehensive documentation can make you feel like you’re part of an exclusive club that’s hard for newcomers to join. Having said that, I’m making the assumption that you really want to be discovered, but that remains to be seen…\n\n\nJavaScript: The artist with a messy palette\nJavaScript, the artist of the web, your creativity knows no bounds. But sometimes, your syntax is as unpredictable as a toddler’s mood swings. And the amount of boilerplate code you require – it’s like asking for a five-course meal when all I want is a sandwich!\n\n\nEmbracing bias with a pinch of salt\nNow, I must sheepishly admit, like many programmers, I harbor biases towards my chosen languages. It’s natural; we’re human, not machines. Our backgrounds, experiences, and preferences shape our choices. But the key is to be aware of these biases, not to be absolutist about our choices, and to always remain open to learning.\nEvery programming language has its flaws, and it’s important to recognize them humorously and with a grain of salt. What’s essential is understanding that these ‘flaws’ are often what make a language uniquely suited for certain tasks. It’s not about finding the perfect language; it’s about finding the right language for the right job, warts and all.\nIn the end, every programming language is ‘bad’ in its own unique and useful way. They’re like friends with different personalities; some are reliable, some are flashy, some are deep thinkers, and others are social butterflies. But together, they make for a diverse and capable team. So, let’s continue to embrace the quirky world of programming languages, with all its imperfections and charm!"
  }
]